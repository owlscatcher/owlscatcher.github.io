[{"content":"","date":"20 December 2023","permalink":"/tags/bash/","section":"Tags","summary":"","title":"bash"},{"content":"","date":"20 December 2023","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"20 December 2023","permalink":"/tags/dev/","section":"Tags","summary":"","title":"dev"},{"content":"","date":"20 December 2023","permalink":"/tags/linux/","section":"Tags","summary":"","title":"linux"},{"content":"","date":"20 December 2023","permalink":"/","section":"Owl's Paw","summary":"","title":"Owl's Paw"},{"content":"","date":"20 December 2023","permalink":"/study/","section":"Studies","summary":"","title":"Studies"},{"content":"","date":"20 December 2023","permalink":"/categories/study/","section":"Categories","summary":"","title":"study"},{"content":"","date":"20 December 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"20 December 2023","permalink":"/tags/terminal/","section":"Tags","summary":"","title":"terminal"},{"content":"","date":"20 December 2023","permalink":"/categories/tips/","section":"Categories","summary":"","title":"tips"},{"content":"Познакомимся с эмулятором терминала и базовыми действиями в нем.\nТерминал # В операционных системах на базе ядра linux, в случае с серверными версиями, существует только 1 способ управления, который дошел до нас из 70-х годов — терминал, а точнее его эмулятор, так как сами терминалы, которые использовались для многопользовательского доступа к мейнфрейму давно остались в прошлом.\nУ терминала есть три способо взаимодействия с пользователем (также это называют стандартным I/O терминала или же стандартными потоками):\nSTDIN — поток чтения, из которого терминал читает программный и пользовательский ввод (сюда мы передаем наши команды); STDOUT — поток вывода, в который производится вывод результатов выполнения чего-либо, вывод сообщений, которые не попадают в категорию ошибок и тд; STDERR — поток вывода сообщений об ошибках. Запоминать это не нужно, это дано для понимания, как операционная система взаимодействует с нами, а мы с ней.\nНад терминалом будет работать одна из трех популярных shell-утилит, через которую мы и будем работать с терминалом:\nbash — самый старый представитель, присутствует в стандартных поставках; zsh — твикнутый bash, который во многом удобнее, но он не идет в стандартной поставке; fish — навороченный shell, который из-за этого становится достаточно тормозным. Управление операционной системой происходит при помощи передачи аргументов в STDIN терминала. Базовые операции с операционной системой разберем ниже.\nОбщаемся с операционной системой через терминал # Первое, что стоит знать о терминале, что мы может передавать вывод одной команды на вход другой (замечательны механизм трех стандартных стримов). Это происходит при помощи пайпа |.\n# результат поиска передается в фильтр # фильтр отобразит файлы, включающие docx find ~/Documents doc | grep -i docx Можно строить большие цепочки вызовов утилит, передавая вывод одной на вход другой, иногда без этого нельзя обойтись.\nВторое, что нужно знать, что выход из практически любой утилиты, которая перехватывает управление, происходит по кнопке q, а прерывание исполнения какой-либо утилиты происходит по комбинации кнопок CTRL + c.\n0. Чтение документации # Чтобы прочитать справку или документацию по любой команде и её аргументам есть утилита man:\nman \u0026lt;утилита_по_которой_нужна_справка\u0026gt; Если забылся какой-то ключ аргумента или просто непонятно, как использовать ту или иную команду — You\u0026rsquo;re welcome, как говорят в нашем посёлке.\n1. Навигация и работа с файлами # Файловая система в *NIX-подобных операционных системах не похода на привычную в Windows. У такой файловой системы есть корень, от которой она начинает ветвиться. Вот пример:\n└── / ├── bin ├── boot ├── dev ├── etc ├── home └── ... Пример выведен при помощи утилиты tree\nДля навигации по директориям (здесь нет привычных \u0026ldquo;папок\u0026rdquo; из windows), копирования или перемещения файлов, просмотра текущей директории и тд используют следующие утилиты:\nCD # cd (change directory) — перейти в другую директорию. Это самая часто используемая утилита, вот как её можно использовать:\n# перейти в папку по пути cd /home/user/Documents # тоже самое, только короче cd ~/Documents # вернуться на уровень выше cd ../ # можно и так cd .. # вернуться на несколько уровней выше cd ../../../ # вернуться сразу в домашнюю папку cd CP, MV и RM # cp (copy files) — копирует указанный файл или директорию в указанную директорию.\ncp /home/\u0026lt;user\u0026gt;/Documents/study/file_1 /home/\u0026lt;user\u0026gt;/Documents mv (move files) — перемещает или переименовывает файл/директорию.\n# переместить файл mv /home/\u0026lt;user\u0026gt;/Documents/study/file_1 /home/\u0026lt;user\u0026gt;/Documents # переименовать файл mv /home/\u0026lt;user\u0026gt;/Documents/study/file_1 /home/\u0026lt;user\u0026gt;/Documents/study/new_file_1 rm (remove files) — удаляет файл или директорию.\n# удалить файл rm /home/\u0026lt;user\u0026gt;/Documents/study/file_1 # удалить папку rm -rf /home/\u0026lt;user\u0026gt;/Documents/study LS # ls (list directory contents) — отображает список файлов и директорий в текущей директории или по заданному пути.\n# простое отображение из текущей директории ls # вывод: # ➜ dir_1 dir_2 file_1 file_2 # вывод списком из текущей директории ls -l # вывод: # total 0 # drwxr-xr-x 1 \u0026lt;user\u0026gt; \u0026lt;group\u0026gt; 0 Dec 20 08:59 dir_1 # drwxr-xr-x 1 \u0026lt;user\u0026gt; \u0026lt;group\u0026gt; 0 Dec 20 08:59 dir_2 # -rw-r--r-- 1 \u0026lt;user\u0026gt; \u0026lt;group\u0026gt; 0 Dec 20 08:59 file_1 # -rw-r--r-- 1 \u0026lt;user\u0026gt; \u0026lt;group\u0026gt; 0 Dec 20 08:59 file_2 # человекочитаемый вывод списком из текущей директории # а также отображение скрытых файлов ls -lah # вывод: # total 0 # drwxr-xr-x 1 \u0026lt;user\u0026gt; \u0026lt;group\u0026gt; 68 Dec 20 08:59 . # drwxr-xr-x. 1 \u0026lt;user\u0026gt; \u0026lt;group\u0026gt; 1.2K Dec 20 08:59 .. # drwxr-xr-x 1 \u0026lt;user\u0026gt; \u0026lt;group\u0026gt; 0 Dec 20 08:59 dir_1 # drwxr-xr-x 1 \u0026lt;user\u0026gt; \u0026lt;group\u0026gt; 0 Dec 20 08:59 dir_2 # -rw-r--r-- 1 \u0026lt;user\u0026gt; \u0026lt;group\u0026gt; 0 Dec 20 08:59 file_1 # -rw-r--r-- 1 \u0026lt;user\u0026gt; \u0026lt;group\u0026gt; 0 Dec 20 08:59 file_2 # -rw-r--r-- 1 \u0026lt;user\u0026gt; \u0026lt;group\u0026gt; 0 Dec 20 08:59 .sicret_file # тоже самое, только по заданному пути ls -lah ~/Documents PWD # pwd (print name of current/working directory) — отображает текущую директорию\npwd # /home/\u0026lt;user\u0026gt;/Documents/study Работа с текстовыми файлами # Как правило в стандартной поставке есть множество утилит для работы с текстовыми файлами в том или ином виде. Далее мы разберем, как вывести текст файла, как открыть его для редактирования и тд.\nCAT, HEAD, TAIL # cat, head и tail выполняют по сути одну и туже функцию, но немного по-разному. Все три утилиты выводят текст в STDOUT:\ncat — выведет всё содержимое файла; head — выведет первые 10 строк содердимого файла; tail — выведет последние 10 строк содержимого файла. Чтобы было проще запомнить эти команды, есть картинка с древних форумов:\nУ этих команд куча ключей, такие, как количество выводимых строй head и tail (ключ -n) и другие. Все это стоит прочитать в man этих утилит.\nLESS # less — это так называемый пейджер, который, как и cat-head-tail- выводит содержимое файла, но в интерактивном режиме и порциями (от того такие утилиты и называют пейджерами).\nВ less реализовано vim-подобное управление, доступен поиск по тексту (команда /).\nТекстовые редакторы # В стандартной поставке 100% будет Vi или его обновленный собрат VIM, а также, скорее всего, nano.\nЕсли не хочется заучивать сложные hot-keys в VIM, лучше использовать nano, он гораздо понятнее и проще, и хорошо подойдет вам, если просто нужно поправить какой-то конфигурационный файл.\nВ случае с VIM главное что нужно знать, это как из него выйти. Никакой магии, просто :q.\nДля VIM в man есть огромная справка, а также в самом VIM есть отличный гайд по управлению этим крутым инстурментом.\nСтоит отметить, что знать VIM все же стоит, потому что во многих инструментах используется vim-подобное управление.\nПроцессы # PS # ps (current processes) — отображает снимок запущенных процессов на момент вызова утилиты. Это бывает полезно, когда надо быстро глянуть, что сейчас работает на сервере.\nЭта утилита может помочь узнать PID процесса, например, чтобы его прибить.\nTOP и HTOP # Две утилиты, которые отображают запущенные процессы и информацию о них.\nЭти утилиты также позволяют прибить процесс, выбрав из списка сигнал, который будет оправлен для завершения работы.\nKILL # kill, как понятно из названия, прибивает процесс по его PID. С этой утилитой нужно быть осторожным и не грохнуть какой-нибудь процесс, связанный с ssh, например, или с какой-нибудь системной утилитой.\nПоиск по файлам и фильтр вывода # FIND # find — очень мощная утилита, которая производит рекурсивный поиск по всем саб-директориям.\nИспользовать её очень просто:\nfind ~/Documents -type f -iname report.pdf Также можно искать файл по содержимому (тут используется фильтр grep, о нем ниже):\nfind . -type f -exec grep -l \u0026#34;pattern\u0026#34; {} \\; Или по его размеру:\nfind /path/to/search -type f -size +1M GREP # grep поход на find, только он выполняет фильтрацию вывода по заданному правилу. При помощи grep мы можем найти файл, в котором содержится какая-то строка текста (это работает для plain text файлов), отфильтровать вывод другой утилиты и тд.\nls -lah | grep -i file_2 -rw-r--r-- 1 \u0026lt;user\u0026gt; \u0026lt;group\u0026gt; 0 Dec 20 08:59 file_2 Благодарности серому волшебнику # Если текст был полезен и ты не можешь усмирить желание быть благодарным, то можешь купить мне чашечку кофе:\nВоспользоваться моей реферальной ссылкой на DigitalOcean:\nИли же закинуть монету в мой кошелёк (USDT и TRX кошельки одинаковые, да, это не ошибка):\nTether (TRC-20, USDT):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Tron (TRX):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Monero (XMR):\n4AbxbT9vrNQTUDCQEPwVLYZq2zTEYzNr9ZzTLaq9YcwVfdxwkWjZ6FsewuXVDXPk7x2rE6FZACmLePPgJEcY4rm1GSHkwTZ ","date":"20 December 2023","permalink":"/study/01_terminal/","section":"Studies","summary":"Познакомимся с эмулятором терминала и базовыми действиями в нем.","title":"Терминал: знакомство и базовые команды"},{"content":"","date":"11 November 2023","permalink":"/categories/blog/","section":"Categories","summary":"","title":"blog"},{"content":"","date":"11 November 2023","permalink":"/blog/","section":"Blogs","summary":"","title":"Blogs"},{"content":"В этой заметке обсудим, как поднять свой сервер под небольшой проект, git-сервер или под умный дом за 1-3 тысячи рублей.\nRaspberry Pi для малоимущих # Многие хотя бы раз слышали про Raspberry Pi, это крутые одноплатные компьютеры с процессорами на arm архитектуре. Это малютки всем хороши, но всегда есть какое-то но, и здесь их больше, чем меньше:\nЦена. Эти штуки до недавнего стояли вменяемые 3-6-8 тысяч рублей, за разного толка конфигурацию, но сейчас цены совсем кусачие, это нам не подходит; Закрытый исходный код. В интернете достаточно примеров бекдоров, которые есть в ПО этих плат. Температуры у старших моделей. Не знаю, стоит ли в целом выносить это в минусы, так как это в целом проблема мощных одноплатников, но пусть будет. На рынке существует много альтернатив, но мы остановимся на open-source Orange Pi и для игрулек я себе взял чуть ли не самую дохлую Orange Pi PC Plus на 1Gb RAM и Quad-Core ARM Cortex-A7 1.296GHz. Встала она мне с корпусом, радиаторами, куллером, двумя блоками питания и флешкой 10 класса на 16Gb за 1 тысячу рублей (если вы не мастер дипломатии и у вас нет младшего брата, то она вам встанет в районе 3 тысяч).\nЕсли сравнить её с Raspberry Pi, то, очевидно, она проиграет во всем, а самое главное, что у Raspberry Pi огромное комьюнити и вы легко нагуглите любую проблему с пошаговым гайдом к решению, а вот с OrPi придется знатно так забуриться в гик-сноб-нёрд форумы и попытаться угадать мелодию с двух нот.\nДавайте накатим для начала на нее сервер и будем смотреть, что к чему.\nПодготавливаем flash-карту # Первым делом идём сюда и определяемся с дистрибутивом. Скажу сразу, что Armbian развивается лучше всех, но мне очень лень пробовать что-то другое, так что я возьму Ubuntu Server. К сожалению там ubuntu server 16.04, но, как говориться, это open-source, ешь, что дают. Для нас это не станет проблемой, мы обновимся до 20.04 без особых проблем далее.\nВключение из будущего (так как статья долго была в драфте), это стало проблемой. Просто берем Armbian и следуем иснтрукциям ниже.\nНам нужно подготовить флешку к записи, флешка должна быть отформатирована в FAT, для того, чтобы нам можно было создать загрузочный диск. Это можно сделать через GParted, если вы на Linux-системе или же через HP USB Disk Storage Format Tool если вы на MS Windows.\nЧто там, что там все очень просто, главное отформатировать в FAT.\nДалее нам нужно залить операционную систему на подготовленную flash-карту. Для этого можно использовать любое удобное для вас ПО, будь то dd, Unetbootin, Rufus, Balena (предпочтительнее).\nЗагрузочная USB через Balena # Скачиваем нужную версию для вашей операционной системы; 1.1. Если вы на линуксе, то нужжно сделать *.appimage исполняемым (ПКМ -\u0026gt; properties -\u0026gt; Executable as program); Запускаем Balena, выбираем \u0026ldquo;Flash from file\u0026rdquo;, выбираем наш образ \u0026ldquo;Armbian_23.8.1_Orangepipcplus_bookworm_current_6.1.47_minimal.img.xz\u0026rdquo; \u0026ldquo;Select target\u0026rdquo; и выбираем нашу флешку, если она не подтянулась туда автоматически; Заливаем образ. Все, флешка готова к использованию в OrPi.\nЗагрузочный USB через DD # Узнаем имя нашей USB-flash карточки:\nlsblk или\nfdisk -l Ищем нашу флешку по объему, моя на 16Gb, и имя у него /dev/sdb, ваша также будет /dev/sdb или /dev/sdc.\nДалее нам необходимо размонтировать том и отформатировать флешку:\numount /dev/sdb* \u0026amp;\u0026amp; mkfs.vfat /dev/sdb –I Теперь заливаем образ на флешку, образ лежит ~/Downloads/Armbian_23.8.1_Orangepipcplus_bookworm_current_6.1.47_minimal.img.xz:\ndd if=~/Downloads/Armbian_23.8.1_Orangepipcplus_bookworm_current_6.1.47_minimal.img.xz of=/dev/sdb Это займет какое-то время, после окончания процесса ваша флешка готова к использованию в Orange Pi.\nПервый запуск # Мы залили на флешку образ, вставили карточку в плату, подключили питание, клавиатуру и монитор, что дальше?\nДальше стоит произвести некоторые манипуляции, после которых можно будет отключить от платы монитор и клавиатуру и закинуть её куда-нибудь подальше в пыльный угол, но до этого войдем в систему:\nПри первом запуске система предложит вам установить пароль и подключиться к сети:\nВы увидите что-то вроде такого:\nЯ пропустил создание нового пользователя, только задал пароль для root и все. Вы же делайте так, как посчитаете нужным.\nДалее Armbian должен сам запустить все скрипты по расширению доступного места. Проверим, запускал ли он их вообще:\ndf -h Глазами находим том смонтированный в / или в /root и смотрим на колонку size, там должен быть доступным объем, равный объему вашей флешки. Если вдруг магии не случилось (что на моей памяти на Armbian у меня не случалось ни разу) то пробуем руками поправить это недоразумение.\nИсправляем проблемы с доступной памятью flash-карты, если не сработал скрипт # Забегая вперед вы 100% столкнетесь с двумя распространенными проблемами:\nНедоступность всего объема памяти флеш-карты для /; Маленький объем в /boot Про первый пункт даже в самой документации есть, не знаю, почему это не исправили спустя столько лет, штош\u0026hellip; open-source moment.\nРасширяем доступный объем для файловой системы:\nДля нас учтивые разработчики положили скрипт, который нам нужно просто запустить из под root:\n/etc/init.d/resize2fs start Если же вы держите flash-карточку в руках, то можно расширить раздел прям через GParted. Мы тем более вернемся к нему снова в решении следующей проблемы.\nРасширяем объем /boot:\nОоо, я с этим просидел в поисковике не один час, а решение было очевидное. Суть проблемы:\nЕсть раздел /boot, у которого выделено 10-15Mb, это очень мало и мы не сможем обновиться; Раздел /boot отформатирован как \u0026lsquo;FAT16\u0026rsquo;, а GParted использует внешний модуль из другой библиотеки для форматирования и там (проблема существует с 16 года) до сих пор не добавлена возможность расширить или как-то работать с разделами \u0026lt; 256Mb. open-souce moment Мы выйдем из положения просто:\nКопируем все из папки /boot куда-нибудь себе на компьютер; Форматируем раздел в ext4; Расширяем его до 512Mb, предварительно откусив это место от раздела /; Форматируем расширенный раздел в FAT16; Заливаем обратно файлы в /boot, которые мы копировали к себе в п. 1. Отлично! Мы только что починили две проблемы, которые не дали бы нам обновляться в будущем, но осталось еще несколько\u0026hellip;\nРаботаем с OrPi удаленно # Чтобы подключиться к нашему серверу по ssh просто пишем:\nssh root@\u0026lt;your_ip\u0026gt; Вводим пароль, который установили при первом логине и все, мы внутри. При первом подключении нас могут спросить про внесение записи в knowhost, пишем yes.\nПоказываем сервер наружу через VPN # Вот тут я уже рассказывал, как нам можно поднять VPN, через который мы соберем устройства в приватной сети. Нам останется только добавить новый Peer для нашего сервера и настроить сам сервер.\nПо этой инструкции генерируем ключи и добавляем Peer на сервере, затем перезагружаем службу.\nЯ добавлял Peer с IP 10.0.0.10, что бы мне проще было запомнить, так что дальше я буду использовать в примере этот адрес.\nДальше переходим на наш OrPi сервер и там устанавливаем wireguard-tools\nsudo apt install -y wireguard-tools Создаем файл конфигурации /etc/wireguard/wg0.conf и вставляем в него это (поменяв ip-внешнего сервера и ключи на свои):\n[Interface] PrivateKey = \u0026lt;YOUT_PRIVATE_KEY\u0026gt; Address = 10.0.0.10/32 DNS = 8.8.8.8 [Peer] PublicKey = \u0026lt;SERVER-PUBLICKEY\u0026gt; Endpoint = \u0026lt;SERVER-IP\u0026gt;:51820 AllowedIPs = 0.0.0.0/0 PersistentKeepalive = 20 Затем прокинем аляс, что бы не так страшно было набирать команды:\nvim ~/.bashrc В конец файла добавляем:\nalias vpn-on=\u0026#39;wg-quick up wg0\u0026#39; alias vpn-off=\u0026#39;wg-quick down wg0\u0026#39; Сохраняем и перечитываем конфиг:\nsource ~/.bashrc Включаем vpn:\nvpn-on Добавим в cron задачу, что бы после рестарта включался vpn:\ncrontab -e Добавляем в конец файла следующее:\n@reboot sleep 60 \u0026amp;\u0026amp; wg-quick up wg0 \u0026gt;\u0026gt;/tmp/cron_log 2\u0026gt;\u0026amp;1 Сохраняемся. Вы великолепны! Теперь вы можете подключиться к своему серверу не из локальной сети:\nssh root@10.0.0.10 Что дальше? # Давайте ради примера, чтобы эта игрушка не была бесполезной, подумаем, что можно на ней вообще поднять.\nУ меня дома на ней поднят Git-сервер при помощи Gitea:\nСкачиваем нужный бинарник; Подготавливаем PostgreSQL базу данных; Запускаем в качестве демона/службы. На работе на похожей плате у меня крутится сервер системы радиационного контроля, запущенный в Docker, но можно и установить netcore runtime локально, никто не мешает это сделать, и в systemd добавить конфигурацию демона.\nТакже есть куча идей в интренете, от своейго NAS-хранилища и DNS-прокси-фильтра, до каких-то крутых DIY проектов:\nNAS-хранилище; NAS-хранилище конкретно на нашей плате; Ретро-консоль из вашего одноплатника; И куча всяких IoT проектов, гуглите, что вас интересует, наверняка это уже кто-то реализовывал.\nБлагодарности серому волшебнику # Если текст был полезен и ты не можешь усмирить желание быть благодарным, то можешь:\nВоспользоваться моей реферальной ссылкой на TimeWeb:\nВоспользоваться моей реферальной ссылкой на DigitalOcean:\nИли же закинуть монету в мой кошелёк (USDT и TRX кошельки одинаковые, да, это не ошибка):\nTether (TRC-20, USDT):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Tron (TRX):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Monero (XMR):\n4AbxbT9vrNQTUDCQEPwVLYZq2zTEYzNr9ZzTLaq9YcwVfdxwkWjZ6FsewuXVDXPk7x2rE6FZACmLePPgJEcY4rm1GSHkwTZ ","date":"11 November 2023","permalink":"/blog/orangepi-server/","section":"Blogs","summary":"В этой заметке обсудим, как поднять свой сервер под небольшой проект, git-сервер или под умный дом за 1-3 тысячи рублей.","title":"Orange Pi или свой сервер дома"},{"content":"","date":"11 November 2023","permalink":"/tags/orange-pi/","section":"Tags","summary":"","title":"orange-pi"},{"content":"","date":"11 November 2023","permalink":"/tags/server/","section":"Tags","summary":"","title":"server"},{"content":"Настроим свежую машину с Fedora38 для комфортной работы разработчика.\nБыстрый старт # Кому не интересно читать всю заметку, вот список пакетов необходимых для работы. Для остальных же — устанавливаем все пакеты и идем разбираться ниже, что для чего и как это настраивать.\nОбновляем репозитории и ставим пакеты # Включаем все репозитории, в том числе и с проприетарным ПО, таким как драйверы видеокарт Nvidia, если это не было сделано при установке:\nИдем в Software, далее следуем скриншотам:\nВключаем Flatpak, отсюда мы будем ставить львиную долю ПО, которая ищется на flathub.org:\nflatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo Обновляем репозитории:\nsudo dnf update -y Ставим нужные пакеты:\nsudo dnf install -y git tmux tree zsh ranger screen neovim duf bat make htop Docker, docker-compose # Ставим docker и docker-compose:\nsudo dnf remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-selinux \\ docker-engine-selinux \\ docker-engine sudo dnf -y install dnf-plugins-core sudo dnf config-manager \\ --add-repo \\ https://download.docker.com/linux/fedora/docker-ce.repo sudo dnf install docker-ce docker-ce-cli containerd.io docker-compose-plugin Установка кодеков # sudo dnf install gstreamer1-plugins-{bad-\\*,good-\\*,base} gstreamer1-plugin-openh264 gstreamer1-libav --exclude=gstreamer1-plugins-bad-free-devel sudo dnf install lame\\* --exclude=lame-devel sudo dnf group upgrade --with-optional Multimedia Твикаем Gnome-4* # Установим gnome-tweak и подкрутим некоторые штуки:\nsudo dnf install gnome-tweaks И включаем для Legacy окон принудительно нашу тему:\nУстанавливаем менеджер расширений и сами расширения:\nflatpak install flathub com.mattjakeman.ExtensionManager Мой список расширений:\nAppIndicator and KStatusNotifierItem Support; Status Area Horizontal Spacing; Vitals. Сами расширения можно поискать тут.\n.net core и ruby для разработчиков # Всё, что ниже — опционально, потому что это все можно запускать в Docker, не засоряя вашу машину, но мне иногда больше нравится играться с CLI ruby или что-то быстренько пробовать с .net вне докер-образа.\nСтавим .NET (.net core 7)\nsudo dnf install dotnet-sdk-7.0 Ставим Ruby:\nsudo dnf install ruby sudo dnf install rubygem-{tk{,-doc},rake,irb,test-unit} Терминал — общаемся с машиной текстом # Часто нужно сделать что-то простое, вроде создания новой папки или файла, а GUI для того зачастую ужасно неудобные, например, в Windows, в их Explorer, нужно ткнуть в свободно место правой кнопкой мыши, выбрать Create new folder, ввести название файла и тд. Пример высосан из пальца, но смотрите, как быстро я сделаю это в терминале:\nmkdir \u0026lt;new_dir_name\u0026gt; Или, если нам понадобилось добавить много вложенных папок, мы можем использовать ключ -p:\nmkdir -p \u0026lt;dir_1\u0026gt;/\u0026lt;dir_2\u0026gt;/\u0026lt;dir_n\u0026gt; Или, вот уже более полезный пример, мне часто нужно конвертировать .png изображения в .webp, но я не хочу их конвертировать по одному или как-то еще, я просто хочу сказать компьютеру о своих намерениях и всё, например, сконвертируй все файлы с расширением .png в .webp, которые ты найдешь в этой папке, но\u0026hellip; я забыл эту команду, там было что-то с .png\u0026hellip; Не беда, терминал дружелюбен:\nhistory | grep .png Нашли нужную, выполним:\nfor f in *.png; do cwebp -q 100 -mt $f -o ${f%.*}.webp; done Столько воды для того, что бы убедить вас, что терминал — ваш друг. Не надо бояться и искать красивые GUI, чтобы клацать по ним манипулятором типа мышь © Диджитализируй\nOh-my-ZSH # Стандартно у вас установлен Bash. Мы же поставим ZSH и твикнем его надстройкой Oh-my-zsh.\nУстановим Oh-my-ZSH:\nsh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; Oh-my-ZSH предложит выбрать по умолчанию ZSH-шелл. Выбираем. Закрываем терминал и все, все круто.\nЕсли вдруг открывается опять Bash, назначаем руками шеллом по умолчанию для вашего юзера ZSH:\nchsh -s $(which zsh) Проверяем, установился ли по умолчанию у нашего юзера нужный шелл:\ngrep $USER /etc/passwd Должны получить это:\n\u0026lt;username\u0026gt;❌1000:1000:Armstrong:/home/\u0026lt;username\u0026gt;:/usr/bin/zsh Настройки Oh-my-ZSH # Файл настроек Oh-my-ZSH лежит в директории ~/.zshrc, можете отредактировать его любым текстовым редактором и перечитать (команда source \u0026lt;dir\u0026gt;/\u0026lt;file_name\u0026gt;), чтобы применить настройки.ш\nДля примера прокинем какой-нибудь удобный alias для терминала:\necho \u0026#34;alias glog=\\\u0026#34;git log --pretty=oneline\\\u0026#34;\u0026#34; \u0026gt;\u0026gt; ~/.zshrc \\ source ~/.zshrc Всякие повседневные удобности # duf — показывает, сколько рыбоф еще поместится на hdd/ssd # Иногда нужно посмотреть, сколько осталось свободного места, а вызывать тот же nautilus и клацать мышью по примонтированным устройствам не очень удобно.\nДля просмотра свободного и занятого дискового пространства обычно предустановлен df, используется просто:\ndf -h Вывод будет примерно таким\nFilesystem Size Used Avail Use% Mounted on devtmpfs 4.0M 0 4.0M 0% /dev tmpfs 7.7G 4.7M 7.7G 1% /dev/shm tmpfs 3.1G 2.0M 3.1G 1% /run /dev/nvme0n1p8 180G 75G 102G 43% / tmpfs 7.7G 2.9M 7.7G 1% /tmp /dev/nvme0n1p6 511M 18M 494M 4% /boot/efi tmpfs 1.6G 156K 1.6G 1% /run/user/1000 /dev/sr0 5.2M 5.2M 0 100% /run/media/\u0026lt;username\u0026gt;/\u0026lt;device_title\u0026gt; Не очень наглядно и тяжело ориентироваться (я отсюда еще половину всяких /loop0n убрал, чтобы меньше путаницы было). Если красивая альтернатива duf. Делает все тоже самое, только аккуратнее и понятнее:\nduf ╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │ 9 local devices │ ├────────────────────────────────────┬────────┬────────┬────────┬───────────────────────────────┬──────────┬────────────────┤ │ MOUNTED ON │ SIZE │ USED │ AVAIL │ USE% │ TYPE │ FILESYSTEM │ ├────────────────────────────────────┼────────┼────────┼────────┼───────────────────────────────┼──────────┼────────────────┤ │ / │ 179.4G │ 74.5G │ 101.7G │ [########............] 41.5% │ btrfs │ /dev/nvme0n1p8 │ │ /boot/efi │ 511.0M │ 17.4M │ 493.6M │ [....................] 3.4% │ vfat │ /dev/nvme0n1p6 │ │ /run/media/\u0026lt;username\u0026gt;/\u0026lt;device\u0026gt; │ 5.2M │ 5.2M │ 0B │ [####################] 100.0% │ iso9660 │ /dev/sr0 │ ╰────────────────────────────────────┴────────┴────────┴────────┴───────────────────────────────┴──────────┴────────────────╯ ╭────────────────────────────────────────────────────────────────────────────────────────────────╮ │ 5 special devices │ ├────────────────┬──────┬────────┬───────┬───────────────────────────────┬──────────┬────────────┤ │ MOUNTED ON │ SIZE │ USED │ AVAIL │ USE% │ TYPE │ FILESYSTEM │ ├────────────────┼──────┼────────┼───────┼───────────────────────────────┼──────────┼────────────┤ │ /dev │ 4.0M │ 0B │ 4.0M │ │ devtmpfs │ devtmpfs │ │ /dev/shm │ 7.7G │ 4.6M │ 7.6G │ [....................] 0.1% │ tmpfs │ tmpfs │ │ /run │ 3.1G │ 2.0M │ 3.1G │ [....................] 0.1% │ tmpfs │ tmpfs │ │ /run/user/1000 │ 1.5G │ 152.0K │ 1.5G │ [....................] 0.0% │ tmpfs │ tmpfs │ │ /tmp │ 7.7G │ 2.9M │ 7.6G │ [....................] 0.0% │ tmpfs │ tmpfs │ ╰────────────────┴──────┴────────┴───────┴───────────────────────────────┴──────────┴────────────╯ Уже куда красивее и понятнее!\nВсю справку можно получить по duf -h, либо же почитать README.md в репозитории автора.\nbat — красиво вывести текстовый очень файл # Для того, чтобы посмотреть содержимое текстового файла, можно сделать так:\ncat ~/.bashrc Вывод будет читаемый, но не очень удобный и без навигации. less тоже не слишком удобный будет для этих целей, хотя и тот и тот инструменты очень шустрые и 100% выполняют свои задачи. Всему этому есть очень прикольная альтернатива с vim-подобным управлением, которая называется bat.\nНу что, попробуем:\nOmmm, So pretty good! Навигация jk работает, и всякие комбинации Shift + g, g, поиск по /\u0026lt;word\u0026gt; и тд, которые работают в vim для навигации также работают. Если будучи в bat назать h, то вы попадете в справку по навигации в bat. Не поленитесь почитать ее, либо посмотреть в репозитории автора.\nhtop — отобразить нагрузку и процессы # Есть такая утилита, как top, она предустановлена во всех системах и показывает нагрузку на систему и запущенные процессы. Отображает, как это водится, не в очень удобном формате.\nИнструмент мощный, и всё в нем есть в целом, но\u0026hellip; Мы будем пользоваться htop.\nНе вижу смысла особо подробно останавливаться на этой утилите, вот вам 2 картинки, как оно смотрится и погнали дальше.\nGit, расскажем о себе # Git должен уметь использовать любой разработчик. Но не все озадачиваются чуть-чуть его поднастроить.\nРасскажем git наше имя и нашу почту, чтобы условный gitlab или github матчил наш аккаунт с нашими коммитами, а то бывает, что коммитят будто бы два разных человека.\ngit config --global user.name \u0026#34;\u0026lt;Your\u0026gt; \u0026lt;Name\u0026gt;\u0026#34; git config --global user.email \u0026#34;\u0026lt;your_email\u0026gt;\u0026#34; Чтобы посмотреть настройку, просто добавляем --get:\ngit config --global --get user.name NeoVim — переосмысление VI и VIM # Тут еще одна шутка о том, что кто-то опять не смог выйти из VIM.\nБезусловно можно исопльзовать любой редактор кода, хоть тот же VScode. Все это легко устанавливается на Fedora. Но я хочу привести несколько аргументов в пользу \u0026ldquo;неудобного\u0026rdquo; на первый взгляд любого VIM-подобного редактора:\nОднообразие рабочего пространства. Нам, как разработчикам, приходится работать как на сервере, так и на своей рабочей машине. VIM есть на любой linux-машине. Научившись 1 раз работать с ним, мы никогда не сядем в лужу, когда нам срочно понадобится твикнуть какой-то конфиг руками прям на сервере. Скорость. VIM крайне шустрый. Дурацкий пример, но все же: попробуйте загрузить JSON-файл на 20-30 тысяч строк в VScode или какой-то другой редактор, а потом еще и поиском попробуйте воспользоваться. VIM очень гибкий. На него, как и на VScode, можно навесить очень много разных плагинов, очень точно настроить сам view-port редактора или вовсе переназначить хоткеи. С появлением LSP надобность в IDE с их IntelliSence вообще отпадает. Существует много программ с VIM-подобным управлением, например Ranger. Так что знание VIM никогда не будет чем-то бесполезным. Теперь перейдем к настройке. Мы не будем использовать ванильный Vi или VIM, а поставили форк от VIM который называется NeoVim.\nПредварительные манипуляции # Создадим файл настроек NeoVim:\ntouch ~/.config/nvim/init.vim Предварительно поставим PlugInstall, через него мы будим устанавливать плагины для NeoVim:\nsh -c \u0026#39;curl -fLo \u0026#34;${XDG_DATA_HOME:-$HOME/.local/share}\u0026#34;/nvim/site/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\u0026#39; И шрифт, который нужен для плагина devicons:\nmkdir -p ~/.local/share/fonts cd ~/.local/share/fonts \u0026amp;\u0026amp; curl -fLo \u0026#34;Droid Sans Mono for Powerline Nerd Font Complete.otf\u0026#34; https://github.com/ryanoasis/nerd-fonts/raw/2.1.0/patched-fonts/DroidSansMono/complete/Droid%20Sans%20Mono%20Nerd%20Font%20Complete.otf Сами шрифты лежал тут.\nЯ буду писать в основном на Ruby и мне нужно будет использовать Solargraph для LSP сервера, так что я дополнительно прокину путь в $PATH переменную, добавив эту строку в ~/.zshrc куда-нибудь в конец:\nexport PATH=$PATH:\u0026#34;/home/owlpaw/bin\u0026#34; Не забываем перечитать файл:\nsource ~/.zshrc Установим сам Solargraph:\ngem install solargraph И поставим ripgrep для поиска по содержимому через Telescope:\nsudo dnf install -y ripgrep Далее предлагаю вставить мой конфиг:\nОткроем наш файл конфигурации:\nnvim ~/.config/nvim/init.vim Я подготовил 2 конфига, но это не означает, что вы можете настроить либо для 1 языка, либо для другого. Вы можете перемешивать конфиги и настройки LSP так, как вам угодно, просто я для C# последнее время не использую NVIM. Для Ruby вставляем такой конфиг (включает LSP и Telescope):\n\u0026#34; Plugins call plug#begin() Plug \u0026#39;morhetz/gruvbox\u0026#39; \u0026#34;https://github.com/morhetz/gruvbox Plug \u0026#39;preservim/nerdtree\u0026#39; Plug \u0026#39;ryanoasis/vim-devicons\u0026#39; Plug \u0026#39;neovim/nvim-lspconfig\u0026#39; Plug \u0026#39;hrsh7th/nvim-compe\u0026#39; Plug \u0026#39;hrsh7th/vim-vsnip\u0026#39; Plug \u0026#39;nvim-lua/popup.nvim\u0026#39; Plug \u0026#39;nvim-lua/plenary.nvim\u0026#39; Plug \u0026#39;nvim-telescope/telescope.nvim\u0026#39; Plug \u0026#39;thoughtbot/vim-rspec\u0026#39; Plug \u0026#39;tpope/vim-rails\u0026#39; Plug \u0026#39;tpope/vim-endwise\u0026#39; call plug#end() \u0026#34; Enable Ruler set ru \u0026#34; Show the line number set number \u0026#34; Enable Syntax Highlighting syntax enable \u0026#34; Enable using the mouse to click or select some peace of code set mouse=a \u0026#34; Set the Tab to 2 spaces set tabstop=2 set shiftwidth=2 set termguicolors set background=dark colorscheme gruvbox set colorcolumn=120 :map \u0026lt;C-n\u0026gt; :NERDTreeToggle\u0026lt;CR\u0026gt; :map \u0026lt;C-p\u0026gt; :Telescope live_grep\u0026lt;CR\u0026gt; :map \u0026lt;C-f\u0026gt; :Telescope find_files\u0026lt;CR\u0026gt; \u0026#34; Lua scripts lua \u0026lt;\u0026lt; EOF require\u0026#39;lspconfig\u0026#39;.solargraph.setup{} local nvim_lsp = require(\u0026#39;lspconfig\u0026#39;) -- Use an on_attach function to only map the following keys -- after the language server attaches to the current buffer local on_attach = function(client, bufnr) local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end --Enable completion triggered by \u0026lt;c-x\u0026gt;\u0026lt;c-o\u0026gt; buf_set_option(\u0026#39;omnifunc\u0026#39;, \u0026#39;v:lua.vim.lsp.omnifunc\u0026#39;) -- Mappings. local opts = { noremap=true, silent=true } -- See `:help vim.lsp.*` for documentation on any of the below functions buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;gD\u0026#39;, \u0026#39;\u0026lt;Cmd\u0026gt;lua vim.lsp.buf.declaration()\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;gd\u0026#39;, \u0026#39;\u0026lt;Cmd\u0026gt;lua vim.lsp.buf.definition()\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;\u0026lt;Cmd\u0026gt;lua vim.lsp.buf.hover()\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;gi\u0026#39;, \u0026#39;\u0026lt;cmd\u0026gt;lua vim.lsp.buf.implementation()\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;\u0026lt;C-k\u0026gt;\u0026#39;, \u0026#39;\u0026lt;cmd\u0026gt;lua vim.lsp.buf.signature_help()\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;\u0026lt;space\u0026gt;wa\u0026#39;, \u0026#39;\u0026lt;cmd\u0026gt;lua vim.lsp.buf.add_workspace_folder()\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;\u0026lt;space\u0026gt;wr\u0026#39;, \u0026#39;\u0026lt;cmd\u0026gt;lua vim.lsp.buf.remove_workspace_folder()\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;\u0026lt;space\u0026gt;wl\u0026#39;, \u0026#39;\u0026lt;cmd\u0026gt;lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;\u0026lt;space\u0026gt;D\u0026#39;, \u0026#39;\u0026lt;cmd\u0026gt;lua vim.lsp.buf.type_definition()\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;\u0026lt;space\u0026gt;rn\u0026#39;, \u0026#39;\u0026lt;cmd\u0026gt;lua vim.lsp.buf.rename()\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;\u0026lt;space\u0026gt;ca\u0026#39;, \u0026#39;\u0026lt;cmd\u0026gt;lua vim.lsp.buf.code_action()\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;gr\u0026#39;, \u0026#39;\u0026lt;cmd\u0026gt;lua vim.lsp.buf.references()\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;\u0026lt;space\u0026gt;e\u0026#39;, \u0026#39;\u0026lt;cmd\u0026gt;lua vim.lsp.diagnostic.show_line_diagnostics()\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;[d\u0026#39;, \u0026#39;\u0026lt;cmd\u0026gt;lua vim.lsp.diagnostic.goto_prev()\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;]d\u0026#39;, \u0026#39;\u0026lt;cmd\u0026gt;lua vim.lsp.diagnostic.goto_next()\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#39;n\u0026#39;, \u0026#39;\u0026lt;space\u0026gt;q\u0026#39;, \u0026#39;\u0026lt;cmd\u0026gt;lua vim.lsp.diagnostic.set_loclist()\u0026lt;CR\u0026gt;\u0026#39;, opts) buf_set_keymap(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;space\u0026gt;f\u0026#34;, \u0026#34;\u0026lt;cmd\u0026gt;lua vim.lsp.buf.formatting()\u0026lt;CR\u0026gt;\u0026#34;, opts) end -- Use a loop to conveniently call \u0026#39;setup\u0026#39; on multiple servers and -- map buffer local keybindings when the language server attaches local servers = { \u0026#34;solargraph\u0026#34; } for _, lsp in ipairs(servers) do nvim_lsp[lsp].setup { on_attach = on_attach, flags = { debounce_text_changes = 150, } } end EOF lua \u0026lt;\u0026lt; EOF vim.o.completeopt = \u0026#34;menuone,noselect\u0026#34; require\u0026#39;compe\u0026#39;.setup { enabled = true; autocomplete = true; debug = false; min_length = 1; preselect = \u0026#39;enable\u0026#39;; throttle_time = 80; source_timeout = 200; incomplete_delay = 400; max_abbr_width = 100; max_kind_width = 100; max_menu_width = 100; documentation = false; source = { path = true; buffer = true; calc = true; vsnip = true; nvim_lsp = true; nvim_lua = true; spell = true; tags = true; snippets_nvim = true; treesitter = true; }; } local t = function(str) return vim.api.nvim_replace_termcodes(str, true, true, true) end local check_back_space = function() local col = vim.fn.col(\u0026#39;.\u0026#39;) - 1 if col == 0 or vim.fn.getline(\u0026#39;.\u0026#39;):sub(col, col):match(\u0026#39;%s\u0026#39;) then return true else return false end end -- Use (s-)tab to: --- move to prev/next item in completion menuone --- jump to prev/next snippet\u0026#39;s placeholder _G.tab_complete = function() if vim.fn.pumvisible() == 1 then return t \u0026#34;\u0026lt;C-n\u0026gt;\u0026#34; elseif vim.fn.call(\u0026#34;vsnip#available\u0026#34;, {1}) == 1 then return t \u0026#34;\u0026lt;Plug\u0026gt;(vsnip-expand-or-jump)\u0026#34; elseif check_back_space() then return t \u0026#34;\u0026lt;Tab\u0026gt;\u0026#34; else return vim.fn[\u0026#39;compe#complete\u0026#39;]() end end _G.s_tab_complete = function() if vim.fn.pumvisible() == 1 then return t \u0026#34;\u0026lt;C-p\u0026gt;\u0026#34; elseif vim.fn.call(\u0026#34;vsnip#jumpable\u0026#34;, {-1}) == 1 then return t \u0026#34;\u0026lt;Plug\u0026gt;(vsnip-jump-prev)\u0026#34; else -- If \u0026lt;S-Tab\u0026gt; is not working in your terminal, change it to \u0026lt;C-h\u0026gt; return t \u0026#34;\u0026lt;S-Tab\u0026gt;\u0026#34; end end vim.api.nvim_set_keymap(\u0026#34;i\u0026#34;, \u0026#34;\u0026lt;Tab\u0026gt;\u0026#34;, \u0026#34;v:lua.tab_complete()\u0026#34;, {expr = true}) vim.api.nvim_set_keymap(\u0026#34;s\u0026#34;, \u0026#34;\u0026lt;Tab\u0026gt;\u0026#34;, \u0026#34;v:lua.tab_complete()\u0026#34;, {expr = true}) vim.api.nvim_set_keymap(\u0026#34;i\u0026#34;, \u0026#34;\u0026lt;S-Tab\u0026gt;\u0026#34;, \u0026#34;v:lua.s_tab_complete()\u0026#34;, {expr = true}) vim.api.nvim_set_keymap(\u0026#34;s\u0026#34;, \u0026#34;\u0026lt;S-Tab\u0026gt;\u0026#34;, \u0026#34;v:lua.s_tab_complete()\u0026#34;, {expr = true}) EOF Для C# вставляем это:\n\u0026#34; We start by installing Vim plugin manager to manage plugins. \u0026#34; A Lot of customizations doen here. if empty(glob(\u0026#39;~/.vim/autoload/plug.vim\u0026#39;)) silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim autocmd VimEnter * PlugInstall --sync | source $MYVIMRC endif call plug#begin(\u0026#39;~/.vim/plugged\u0026#39;) Plug \u0026#39;preservim/nerdtree\u0026#39; \u0026#34; Left file-tree pannel Plug \u0026#39;ryanoasis/vim-devicons\u0026#39; \u0026#34; Language icon for file Plug \u0026#39;vim-airline/vim-airline\u0026#39; \u0026#34; Bottom info pannel Plug \u0026#39;flazz/vim-colorschemes\u0026#39; Plug \u0026#39;vim-airline/vim-airline-themes\u0026#39; Plug \u0026#39;ervandew/supertab\u0026#39; Plug \u0026#39;neoclide/coc.nvim\u0026#39;, {\u0026#39;branch\u0026#39;: \u0026#39;release\u0026#39;} Plug \u0026#39;puremourning/vimspector\u0026#39; Plug \u0026#39;prettier/vim-prettier\u0026#39;, { \u0026#39;do\u0026#39;: \u0026#39;npm install\u0026#39; , \u0026#39;branch\u0026#39; : \u0026#39;release/1.x\u0026#39; } Plug \u0026#39;dense-analysis/ale\u0026#39; \u0026#34; LSP servers Plug \u0026#39;OmniSharp/omnisharp-vim\u0026#39; \u0026#34; LSP server form .net \u0026#34;Fuzzy Search Plug \u0026#39;junegunn/fzf\u0026#39;, { \u0026#39;do\u0026#39;: { -\u0026gt; fzf#install() } } Plug \u0026#39;junegunn/fzf.vim\u0026#39; Plug \u0026#39;valloric/MatchTagAlways\u0026#39; Plug \u0026#39;jiangmiao/auto-pairs\u0026#39; call plug#end() :map \u0026lt;C-n\u0026gt; :NERDTreeToggle\u0026lt;CR\u0026gt; :map \u0026lt;C-p\u0026gt; :GFiles\u0026lt;CR\u0026gt; :map \u0026lt;C-f\u0026gt; :Files\u0026lt;CR\u0026gt; \u0026#34;collapse json files by themselves. :map \u0026lt;C-j\u0026gt; :set filetype=json \\| :syntax on \\| :set foldmethod=syntax \u0026#34;zo for open \u0026#34;zc for close \u0026#34; Auto indent your file. map \u0026lt;F7\u0026gt; gg=G\u0026lt;C-o\u0026gt;\u0026lt;C-o\u0026gt; \u0026#34; Navigate Tabs map \u0026lt;C-t\u0026gt;\u0026lt;up\u0026gt; :tabr\u0026lt;cr\u0026gt; map \u0026lt;C-t\u0026gt;\u0026lt;down\u0026gt; :tabl\u0026lt;cr\u0026gt; map \u0026lt;C-t\u0026gt;\u0026lt;left\u0026gt; :tabp\u0026lt;cr\u0026gt; map \u0026lt;C-t\u0026gt;\u0026lt;right\u0026gt; :tabn\u0026lt;cr\u0026gt; \u0026#34; Supprot for different goto definitions for different file types. autocmd FileType cs nmap \u0026lt;silent\u0026gt; gd :OmniSharpGotoDefinition\u0026lt;CR\u0026gt; autocmd FileType cs nnoremap \u0026lt;buffer\u0026gt; \u0026lt;Leader\u0026gt;fu :OmniSharpFindUsages\u0026lt;CR\u0026gt; autocmd FileType cs nnoremap \u0026lt;buffer\u0026gt; \u0026lt;Leader\u0026gt;fi :OmniSharpFindImplementations\u0026lt;CR\u0026gt; autocmd FileType cs nnoremap \u0026lt;Leader\u0026gt;\u0026lt;Space\u0026gt; :OmniSharpGetCodeActions\u0026lt;CR\u0026gt; autocmd FileType ts nmap \u0026lt;silent\u0026gt; gd :call CocActionAsync(\u0026#39;jumpDefinition\u0026#39;)\u0026lt;CR\u0026gt; autocmd FileType html nmap \u0026lt;silent\u0026gt; gd :call CocActionAsync(\u0026#39;jumpDefinition\u0026#39;)\u0026lt;CR\u0026gt; \u0026#34; The following commands are contextual, based on the cursor position. \u0026#34; autocmd FileType cs nnoremap \u0026lt;buffer\u0026gt; \u0026#34; autocmd FileType cs nnoremap \u0026lt;buffer\u0026gt; \u0026lt;Leader\u0026gt;fs :OmniSharpFindSymbol\u0026lt;CR\u0026gt; let g:vimspector_enable_mappings = \u0026#39;HUMAN\u0026#39; let g:airline_powerline_fonts=1 let g:tmuxline_powerline_separators = 0 \u0026#34; colorscheme Monokai colorscheme minimalist let g:airline_theme=\u0026#39;minimalist\u0026#39; set colorcolumn=120 set number \u0026#34; set relativenumber \u0026#34; Toggle relative line number nmap \u0026lt;C-L\u0026gt;\u0026lt;C-L\u0026gt; :set norelativenumber\u0026lt;CR\u0026gt; map \u0026lt;C-R\u0026gt;\u0026lt;C-L\u0026gt; :set relativenumber\u0026lt;CR\u0026gt; set encoding=utf-8 scriptencoding utf-8 let g:airline#extensions#tmuxline#enabled = 0 \u0026#34; How tab behaves while picking auto complete. let g:SuperTabMappingForward = \u0026#39;\u0026lt;S-Tab\u0026gt;\u0026#39; let g:SuperTabMappingBackward = \u0026#39;\u0026lt;Tab\u0026gt;\u0026#39; :set tabstop=4 :set shiftwidth=4 :set expandtab set clipboard+=unnamedplus \u0026#34; Move Swap Directory to something temporary. set directory^=$HOME/tempswap// \u0026#34; This directory should exist. \u0026#34; Always enable preview window on the right with 60% width let g:fzf_preview_window = \u0026#39;right:60%\u0026#39; \u0026#34; vim wiki settings. set nocompatible filetype plugin on syntax on let g:vimwiki_list = [{\u0026#39;path\u0026#39;: \u0026#39;~/vimwiki/\u0026#39;, \\ \u0026#39;syntax\u0026#39;: \u0026#39;markdown\u0026#39;, \u0026#39;ext\u0026#39;: \u0026#39;.md\u0026#39;}] if executable(\u0026#39;ag\u0026#39;) \u0026#34; Use Ag over Grep set grepprg=ag\\ --nogroup\\ --nocolor \u0026#34; Use ag in CtrlP for listing files. Lightning fast and respects .gitignore \u0026#34; let g:ctrlp_user_command = \u0026#39;ag %s -l --nocolor -g \u0026#34;\u0026#34;\u0026#39; endif \u0026#34; ctrl+p when you move to a file this highlights it. let g:nerdtree_sync_cursorline = 1 \u0026#34; Use K to show documentation in preview window. nnoremap \u0026lt;silent\u0026gt; K :call \u0026lt;SID\u0026gt;show_documentation()\u0026lt;CR\u0026gt; function! s:show_documentation() if (index([\u0026#39;vim\u0026#39;,\u0026#39;help\u0026#39;], \u0026amp;filetype) \u0026gt;= 0) execute \u0026#39;h \u0026#39;.expand(\u0026#39;\u0026lt;cword\u0026gt;\u0026#39;) else call CocAction(\u0026#39;doHover\u0026#39;) endif endfunction \u0026#34; Read gitignore and dont show relevant files in ctrlp. \u0026#34; let g:ctrlp_user_command = [\u0026#39;.git/\u0026#39;, \u0026#39;git --git-dir=%s/.git ls-files -oc --exclude-standard\u0026#39;] let g:prettier#config#parser = \u0026#39;babylon\u0026#39; \u0026#34; hi Normal ctermbg=none \u0026#34; \u0026#34; For Coc Action Menu to work. \u0026#34; Remap for do codeAction of selected region function! s:cocActionsOpenFromSelected(type) abort execute \u0026#39;CocCommand actions.open \u0026#39; . a:type endfunction xmap \u0026lt;silent\u0026gt; \u0026lt;leader\u0026gt;a :\u0026lt;C-u\u0026gt;execute \u0026#39;CocCommand actions.open \u0026#39; . visualmode()\u0026lt;CR\u0026gt; nmap \u0026lt;silent\u0026gt; \u0026lt;leader\u0026gt;a :\u0026lt;C-u\u0026gt;set operatorfunc=\u0026lt;SID\u0026gt;cocActionsOpenFromSelected\u0026lt;CR\u0026gt;g@ let g:ale_linters_ignore = { \\ \u0026#39;typescript\u0026#39;: [\u0026#39;tslint\u0026#39;], \\} let g:ale_linters = { \\ \u0026#39;cs\u0026#39;: [\u0026#39;OmniSharp\u0026#39;] \\} let g:OmniSharp_server_use_net6 = 1 Сохраняем и перечитываем файл, для этого используем команды vim. Чтобы ввести команду, нужно нажать : и далее ввести шорткод. В нашем случае вводим w от write, нажимаем enter, затем вводим команду so %, чтобы перечитать файл. На все ошибки пока не обращаем внимание, нажимаем enter, пока они не пропадут.\nУстановим все плагины, которые мы указали в конфигуракции: :PlugInstall.\nУстановим LSP-сервер для netcore: :OmniSharpInstall\nВсе, вам VIM готов. Хорошо бы почитать все шорткоды для установленных плагинов, например для NerdTree открыть / закрыть панель будет CTRL + n и тд.\nRanger — VIM-подобный файловый менеджер # Ranger очень удобный файловый менеджер, который управляется примерно также, как и VIM. Он удобен тем, что его, как и VIM, очень легко настроить под свои нужны, например мы хотим включить предпросмотр .pdf файлов, картинок и тд.\nВключаем предпросмотр изображений и .pdf на Wayland # А не включите вы его, если у вас Wayland по умолчанию, вот issues, который был закрыт со словами, что imv был принят,как просмотрщик по умолчанию в 2019 году еще, что сейчас там поменялось или нет, я не совсем в курсе, так что никаких превью картинок.\nВы можете попробовать какой-нибудь из методов, приведенных тут, мне было ооочень лень этим заниматься, я сделал себе просмотр через mpv и все, предпросмотр докручивать не стал.\nDocker — исправление проблем # Docker по умолчанию не запущен при старте системы. Исправляем это:\nДобавляем вашего пользователя в группу Docker:\nusermod -a -G docker $USER Добавляем Docker в автозагрузку:\nsudo systemctl enable docker Благодарности серому волшебнику # Если текст был полезен и ты не можешь усмирить желание быть благодарным, то можешь:\nВоспользоваться моей реферальной ссылкой на TimeWeb:\nВоспользоваться моей реферальной ссылкой на DigitalOcean:\nИли же закинуть монету в мой кошелёк (USDT и TRX кошельки одинаковые, да, это не ошибка):\nTether (TRC-20, USDT):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Tron (TRX):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Monero (XMR):\n4AbxbT9vrNQTUDCQEPwVLYZq2zTEYzNr9ZzTLaq9YcwVfdxwkWjZ6FsewuXVDXPk7x2rE6FZACmLePPgJEcY4rm1GSHkwTZ ","date":"8 September 2023","permalink":"/blog/setup-linux-for-dev/","section":"Blogs","summary":"Настроим свежую машину с Fedora38 для комфортной работы разработчика.","title":"Linux для пользователей и разработчиков, первые настройки"},{"content":"","date":"8 September 2023","permalink":"/tags/vim/","section":"Tags","summary":"","title":"vim"},{"content":"","date":"8 September 2023","permalink":"/tags/zsh/","section":"Tags","summary":"","title":"zsh"},{"content":"","date":"31 August 2023","permalink":"/tags/armstrong/","section":"Tags","summary":"","title":"armstrong"},{"content":"В этой заметке мы разберемся, как же нам опросить внешние устройства, подсмотрим в Modbus RTU и придумаем свой протокол опроса внешних устройств.\nНачало # Хантер С. Томпсон «Страх и отвращение в Лас-Вегасе»\nУ нас было два пакетика травы, семьдесят пять ампул мескалина, 5 пакетиков диэтиламида лизергиновой кислоты или ЛСД, солонка, наполовину наполненная кокаином, и целое море разноцветных амфетаминов, барбитуратов и транквилизаторов, а так же литр текилы, литр рома, ящик «Бадвайзера», пинта чистого эфира, и 12 пузырьков амилнитрита. Не то, чтобы всё это было категорически необходимо в поездке, но если уж начал собирать коллекцию, то к делу надо подходить серьёзно.\nПеред нами стояла задача получить данные с блока детектирования, каким-то образом обработать полученный результат опроса и положить храниться в базу данных. Сегодня мы подробно остановимся именно на процессе получения данных от внешних устройств, таких как блоки детектирования.\nВооружившись паяльником, парой компьютеров и смекалкой начнем решать задачу!\nОткуда берется информация на микроконтроллере # Краткий экскурс в 9 класс школьной физики: электрический ток — это направленное движение частиц способных переносить заряд. В нашем случае носителем заряда является электроны и ионы, которые скользят по поверхности медного или другого проводника (электролита) при возникновении разницы потенциалов.\nЭто наши самые маленькие друзья и соратники, которые помогают провести измерение какой-то физической величины, а потом, при помощи других устройств или приборов, оцифровать полученные результаты. Эти устройства должны получать какой-либо сигнал на вход, чтобы его зарегистрировать. Сам же сигнал представляет собой просто электрический ток, который двигается до первого аналогово-цифрового преобразователя, нашего устройства.\nСтарые блоки детектирования, как правило, не оснащены цифровым выходом, а следовательно нам требовалось подумать, как нам преобразовать аналоговый сигнал (тот самый электрический ток), который представляет из себя набор различных амплитуд напряжения в двоичный код. Полезным сигналом мы считаем положительные импульсы от 0.3 Вольта.\nПо большому счету нам требовалось получить понятный набор нулей и единиц из этого:\nСигнал в таком виде приходит на вход аналогово-цифрового преобразователя, которым в нашем случае выступает измерительный канал:\nПреобразование происходит по принципу накопления количества импульсов за определенный отрезок времени. Этот отрезок времени принято называть временем экспозиции кадра или просто кадром, по аналогии с плёночной фотографией, где экспозиция характеризует время, за которое свет попадает на пленочный кадр (экспонирует кадр).\nВ нашем случае за время кадра мы принимаем 2.5 (если точнее — одно переполнение таймера = 2,275560 с., 2.5 с. взяли для упрощения) секунды, это время было выбранно эмпирическим путём и для наших задач оно оптимально.\nВесь процесс \u0026ldquo;экспонирования кадра\u0026rdquo; можно разбить на следующие этапы:\nВ микроконтроллере срабатывает триггер каждый раз, когда на его ножке появляется положительное напряжение амплитудой выше 0.3 вольта; Каждое срабатывание триггера увеличивает счетчик на 1; По истечении 2.5 секунды счетчик обнуляется, срабатывает прерывание, процесс повторяется. Это релевантно, если нам нужен условный \u0026ldquo;частотомер\u0026rdquo;. Если же нам требуется считать длительность, то счет должен включаться при появлении восходящего фронта и прерывание должно срабатывать при появлении нисходящего фронта.\nТаким образом в буффере появляется посчитанная частота импульсов либо длительность импульсов, в зависимости от того, в каком режиме счета работает измерительный канал. Настало время подумать, как нам забрать эту информацию на компьютер.\nДоговариваемся о формате беседы # Для того, чтобы общаться с микроконтроллером, нам нужно определиться о формате нашей беседы. Так как мы взяли за основу Modbus RTU, в котором пакеты имеют формат:\nName Length (bits) Function Start 3.5 x 8 At least 3+1⁄2 character times (28 bits) of silence (mark condition) Address 8 Station address Function 8 Indicates the function code e.g. \u0026ldquo;read coils\u0026rdquo; Data n × 8 Data + length will be filled depending on the message type CRC 16 Cyclic redundancy check End 3.5 x 8 At least 3+1⁄2 character times (28 bits) of silence (mark condition) between frames мы не будем изобретать велосипед и упростим этот пакет до 8 байт, для наших целей не нужны никакие старт/стоп биты и тд:\nnew byte[] { addr, func, value1, value2, value3, value4, CRC0, CRC1 } Вот они слева направо:\nАдрес устройства (канала), задается от 0 (0x00) до 255 (0xFF); Функция или же комманда, рассказываем измерительному каналу, что именно мы от него хотим; value1..value4 это 4 байта, в которых хранится float значение, т.е. число с плавующей точкой. Почему 4 байта можно почитать тут и тут; CRC0 и CRC1 это контрольная сумма CRC16, нужная, чтобы удостовериться, что пакет по пути не исказился (как ее посчитать рассмотрим дальше); Вы можете эксперементировать с этим набором как угодно, главное чтобы микроконтроллер и ваш сервер/приложение использовали один протокол. Мы же договорились использовать примерно такой формат записи (примем за адрес канала 0x01):\nТак как Modbus RTU предполагает общение в рещиме master-slave, то инициировать передачу данных всегда будет сервер/приложение. Мы либо запрашиваем данные, либо управляем измерительным каналом.\nТакже хочу отметить, что при запросе данных 4 байта value заполняем просто нулями, контроллеру все равно, что там лежит, если он получаем команду на передачу данных из буффера, а если управляем, то используем эти байты для уточнения команды, например передаем туда цвет световой сигнализации или же передаем вместе с цветом сигнал на включение еще и звуковой сигнализации.\nПриём данных и передача комманд # У измерительного канала есть 5-pin выход (GND, +12 Вольт, -12 Вольт, RX, TX). Нас интересует DATA линия RX-TX, которая из себя представляет просто витую пару. Чтобы нам получить данные по этой линии, мы будем использовать RS-485, но мы же неможем подключить витую пару прямо в порт компьютера, следовательно придется использовать конвертер RS-485 ⇨ USB. Выбор пал на ОВЕН АС-4М, который почему-то стал стоить каких-то конских денег в 2022 году.\nНа компьютере наш преобразователь будет виден просто как последовательный (serial / com) порт с именем COM1..COM99 или же ttyUSB0..ttyUSB99. Зная имя/адрес нашего порта, мы можем начать кидать через него запросы и комманды на наш измерительный канал, для этого в коде нам нужно:\nУстарновить имя порта; Открыть порт; Подготовить пакет, посчитать контрольную сумму пакета; Отправить пакет через этот порт; Прочитать ответ от измерительного канала; Закрыть порт. Оговорюсь, что я в своём проекте использую .json файл, где собрал нужный мне конфиг, чтобы у вас не было вопросов, откуда берутся значения. Вот кусочек из него:\n\u0026#34;PortSettings\u0026#34;: { \u0026#34;PortName\u0026#34;: \u0026#34;/dev/ttyUSB0\u0026#34;, \u0026#34;BaudRate\u0026#34;: 9600, \u0026#34;DeadPollingTime\u0026#34;: 100, \u0026#34;MinimalPollingTimeout\u0026#34;: 1000 } Ну а теперь почитаем немножко код на C#.\nУстанавливаем имя порта: public class ComPort : SerialPort { public ComPort() { PortName = AppSettings.AppPortSettings.PortName; BaudRate = AppSettings.AppPortSettings.BaudRate; } } Подготовим наш пакет, посчитаем для него CRC16: // Сгенерируем наш пакет private static byte[] GeneratePackage(byte address, byte function) { var package = new byte[] { address, function, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; package = VerifivationPackageHelper.GetVerifiedPackage(package); return package; } // Метод вернет верифицированный пакет // с добавленной в него CRC16 контрольной суммой public static byte[] GetVerifiedPackage(byte[] message) { var crc = CalculateCrc16(message); var vMessage = message; vMessage[6] = crc[0]; vMessage[7] = crc[1]; return vMessage; } // Метод вычисляющий CRC16 контрольную сумму private static byte[] CalculateCrc16(byte[] message) { var CRC = new byte[2]; ushort CRCFull = 0xFFFF; char CRCLSB; for (int i = 0; i \u0026lt; (message.Length) - 2; i++) { CRCFull = (ushort)(CRCFull ^ message[i]); for (int j = 0; j \u0026lt; 8; j++) { CRCLSB = (char)(CRCFull \u0026amp; 0x0001); CRCFull = (ushort)((CRCFull \u0026gt;\u0026gt; 1) \u0026amp; 0x7FFF); if (CRCLSB == 1) CRCFull = (ushort)(CRCFull ^ 0xA001); } } CRC[1] = (byte)((CRCFull \u0026gt;\u0026gt; 8) \u0026amp; 0xFF); CRC[0] = (byte)(CRCFull \u0026amp; 0xFF); return CRC; } Открываем порт и кидаем туда пакет: public static void SendMessage(ComPort port, byte[] message) { if (!port.IsOpen) { port.Open(); System.Console.WriteLine(\u0026#34;Com-port: Port be open.\u0026#34;); } port.Write(message, 0, 8); } Чуть-чуть спим, чтобы не попасть в мёртвое время на линии связи: Thread.Sleep(DeadPollingTime); Читаем ответ от опрошенного измерительного канала, сразу же вычисляя его CRC16 контрольную сумму, чтобы убедиться, что с пакетом все ок: public static byte[] ReadMessage(ComPort port) { var packageSize = port.BytesToRead; var bufferSize = 8; var buffer = new byte[bufferSize]; if (packageSize != bufferSize) { System.Console.WriteLine($\u0026#34;SIZE ERROR: Package size = {packageSize}\u0026#34;); return new byte[] { Bytes.SEZE_ERROR }; } for (var i = 0; i \u0026lt; packageSize; i++) { buffer[i] = (byte)port.ReadByte(); } if (VerifivationPackageHelper.IsVerified(buffer)) return buffer; else { System.Console.WriteLine(\u0026#34;CRC ERROR\u0026#34;); return new byte[] { Bytes.CRC_ERROR }; } } Ну вот и всё, данные с микроконтроллера уже у нас в оперативной памяти и мы можем крутить ими как нам вздумается.\nВместо заключения # В завершении кратко пробежимся по тому, что нам нужно сделать, чтобы получить данные от какого-либо устройства:\nАЦП-преобразователь, если у устройства есть только аналоговый выход; Выбрать протокол связи с нашим АЦП-преобразователем; Использовать существующий или придумать свой протокол обмена данными (изобретать своё велосипед всегда ведь интереснее); Ничего сложного, нам всего-то понадобилось пару банок флюса, 100 грамм припоя, пара паяльников, несколько пар уставших глаз разглядывающих разноцветные буквы в редакторе кода. Попробуйте и вы, начните хотя бы с простого термометра-гигрометра, он будет работать и опрашиваться точно по тому же принципу, что и наши блоки детектирования в системе радиационного контроля.\nБлагодарности серому волшебнику # Если текст был полезен и ты не можешь усмирить желание быть благодарным, то можешь:\nВоспользоваться моей реферальной ссылкой на TimeWeb:\nВоспользоваться моей реферальной ссылкой на DigitalOcean:\nИли же закинуть монету в мой кошелёк (USDT и TRX кошельки одинаковые, да, это не ошибка):\nTether (TRC-20, USDT):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Tron (TRX):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Monero (XMR):\n4AbxbT9vrNQTUDCQEPwVLYZq2zTEYzNr9ZzTLaq9YcwVfdxwkWjZ6FsewuXVDXPk7x2rE6FZACmLePPgJEcY4rm1GSHkwTZ ","date":"31 August 2023","permalink":"/project/armstrong/arms-rs485/","section":"Projects","summary":"В этой заметке мы разберемся, как же нам опросить внешние устройства, подсмотрим в Modbus RTU и придумаем свой протокол опроса внешних устройств.","title":"ARMStrong: линия связи RS-485 или путешествие туда и обратно"},{"content":"","date":"31 August 2023","permalink":"/tags/modbus/","section":"Tags","summary":"","title":"modbus"},{"content":"","date":"31 August 2023","permalink":"/categories/projects/","section":"Categories","summary":"","title":"projects"},{"content":"","date":"31 August 2023","permalink":"/project/","section":"Projects","summary":"","title":"Projects"},{"content":"","date":"31 August 2023","permalink":"/tags/rs238/","section":"Tags","summary":"","title":"rs238"},{"content":"","date":"31 August 2023","permalink":"/tags/rs485/","section":"Tags","summary":"","title":"rs485"},{"content":"","date":"21 February 2023","permalink":"/tags/pass/","section":"Tags","summary":"","title":"pass"},{"content":"В этой заметке мы разберемся, как нам безопасно хранить все свои пароли и каким образом снизить вероятность взлома своих аккаунтов.\nВода по теме безопасности # Цифровая гигиена достаточно скучная тема для среднего потребителя контента, но все же привыкли мыть руки после 2020 года, так и в случае с digital-пространством эта рутина должна стать обыденностью.\nМногие люди, когда в беседе могут быть упомянуты утечки данных или подтверждения того, что коммерческие корпорации, вроде Google, Apple, Microsoft, etc., используют ваши персональные данные в своих целях, могут сказать, мол, да пускай, мне скрывать нечего. Но, когда упоминаешь, что эти компании знают, что вы едите, какие покупки совершаете чаще всего, по каким сайтам передвигаетесь в течении дня, кто ваш круг общения, какие финансовые транзации совершаете, номера ваших карт, ваши адреса и многие другие чувствительные данные, которые мы тоннами передаём добровольно, меняя личное удобство и комфорт на свои данные — собеседник на секунду округляет глаза, но потом махает рукой, со словами \u0026ldquo;да и пофиг\u0026rdquo;, теряя интерес к диалогу.\nДля тех же, кому сохранность своих данных важнее, чем комфорт, я поделюсь одним способов хотя бы немного отодвинуть от себя надоедливого большого брата. Совсем отказаться от многих вещей сейчас не получится да и не захочется, но так мы хотя бы увеличим шансы не остаться с носом.\nПри этом, как показала практика, никто не будет нести какую-либо ответственность за утечки ваших персональных данных. Ну, подумаешь, утекла база на несколько миллионов человек у какой-то доставки или такси\u0026hellip;\nМежду тем утечек все больше, например тут, тут, или вот тут.\nВместе с сливами ваших данных, которые могут быть попросту агрегированы из открытых источникв (предположим, бот ходит по всем открытым страницам социальных сетей и собирает дату), могут быть слиты и связки login-password, что уже куда опаснее, чем просто знание, сколько котиков вы лайкнули вчера вечером. Если за то, что вы лайкаете только белых котиков, вам могут предъявить зоозащитники, то вот за утерю доступа до своих аккаунтов уже можно поплатиться из своего кармана.\nЕсли на утечки баз данных мы не можем непосредственно влиять (разве что перестать кормить данными эти сервисы), то вот урон от утечек баз данных с паролями мы можем свести на нет.\nКак мои аккаунты могут быть взломаны # Существует множество способов взлома учетных записей, какие-то из них уже устарели и не дадут никаких результатов, какие-то слишком медленные и тоже не особо результативны, а какие-то маловероятны, но могут давать 100% результат.\nПеречислять все способы бессмысленно, потому что кроме брутфорса в лоб или социальной инженерии существует как раз один из таких маловероятных, но эффективных методов — дамп базы данных с логинами и паролями. В случае утечки злоумышленник получает ваши пары login-password в хешированном виде, а если разработчик сервиса еще и не очень порядочный или попросту глуповатый человек, то пароли могли хранить в открытом виде.\nВозникнет резонный вопрос — ну получил вот злоумышленник мой пароль и что? У меня двухфакторная авторизация по SMS или приложение для генирации кодов, типа Google Authenticator. И это не гарантирует 100% защиты, и вот почему. А в случае утери доступа к Google-аккаунту вы потеряете еще и доступ к приложению с кодами.\nПочему важно иметь разные пароли # Первый эшелон защиты — один пароль для одного сервиса. Если вы пользуетесь 1-5 сервисами, то пароли еще можно запомнить, но будем реалистами. Тем более лучше всего попросту генерировать и составлять из различных последовательностей свой уникальный пароль, который будет обезличен и у злоумышленника не будет возможность попросту отождествляя ваш аккаунт с вами методом тыка угадать ваш Fluffy19-CaT2022.\nПеред нами встаёт задача как-то оперативно управлять нашими паролями, при необходимости изменять их и запоминать, потому что сгенерировав новый пароль вида Asd7_634--sc(324)? вы его помните ровно 0 секунд.\nКак вариант, вы заходите начать использовать различные сервисы для хранения ваших паролей, ведь они гарантируют сохранность и приватность ваших данных, например iCloud, Google/Firefox/Any_browser хранилки. Но спешу вас предостеречь, что эти сервисы не могут вам гарантировать на 100% сохранность ваших данных, они не будут вам гарантировать перманентный доступ до ваших паролей в любое время и в любой момент вы можете попросту потерять все свои данные по прихоти владельца сервиса.\nКак будем хранить пороли # Первым делом мы унесем все ключи шифрования и связки login-password на локальную машину, что бы только вы были ответственны за сохранность этих данных. Хранить пароли в .txt файлике очень плохая идея, потому что мы получаем ровно туже самую картину, что в случае утери файла с вашими паролями злоумышленник имеет все нужные ему данные для входа, потому что пароли были в открытом виде.\nПервым шагом было бы логично предположить — шифровать пароли, хешировать или еще как-то прятать данные от глаз.\nВторым шагом — спрятать пары login-password вообще в целом от простого доступа, но что бы это было локально, на вашем компьютере или смартфоне, что бы никто, кроме вас, не управлял этим файлом.\nВыход из ситуации простой — менеджер паролей Pass.\nPass — лучший менеджер паролей # Для своих целей мы будем использовать open-source менеджер Pass.\nЦитата с сайта:\nУправление паролями должно быть простым и соответствовать философии Unix. С pass, каждый пароль живет внутри gpg зашифрованный файл, имя файла которого является названием веб-сайта или ресурса, для которого требуется пароль. Эти зашифрованные файлы могут быть организованы в значимые иерархии папок, скопированы с компьютера на компьютер и, в общем, управляться с помощью стандартных утилит управления файлами командной строки. По сути Pass это bash скрипт, который использует для шифрования GnuPG.\nСоздаем ключи шифрования # gpg --full-gen-key Будет преложен алгоритм шифрования:\nPlease select what kind of key you want: (1) RSA and RSA (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) (9) ECC (sign and encrypt) *default* (10) ECC (sign only) (14) Existing key from card Выбираем RSA, вводим 1.\nДалее нам предлагают ввести длину ключа:\nRSA keys may be between 1024 and 4096 bits long. What keysize do you want? (3072) Вводим 4096.\nДалее нас спрашивают о сроке жизни ключа, я указал бессрочный (0):\nPlease specify how long the key should be valid. 0 = key does not expire \u0026lt;n\u0026gt; = key expires in n days \u0026lt;n\u0026gt;w = key expires in n weeks \u0026lt;n\u0026gt;m = key expires in n months \u0026lt;n\u0026gt;y = key expires in n years Key is valid for? (0) 0 Key does not expire at all Is this correct? (y/N) y Следом нас просят ввести реальное имя и почту (можно вводить вообще любые данные, главное, чтобы вы их помнили сами), и дополнительный пароль для доступа к ключам.\nЧто бы внести больше рандомизации в генерацию ключей, нас попросят нажимать всякие кнопки и двигать курсором:\nWe need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. Делаем это и получаем свои ключи:\ngpg: /home/\u0026lt;username\u0026gt;/.gnupg/trustdb.gpg: trustdb created gpg: directory \u0026#39;/home/\u0026lt;username\u0026gt;/.gnupg/openpgp-revocs.d\u0026#39; created gpg: revocation certificate stored as \u0026#39;/home/\u0026lt;username\u0026gt;/.gnupg/openpgp-revocs.d/\u0026lt;cert_name\u0026gt;.rev\u0026#39; public and secret key created and signed. pub rsa4096 2022-01-15 [SC] \u0026lt;cert_name\u0026gt; uid \u0026lt;your_name\u0026gt; \u0026lt;email@mail.com\u0026gt; sub rsa4096 2022-01-15 [E] Чтобы удостовериться, что наши ключи созданы, вводим:\nПоказать все публичные ключи:\ngpg -k Показать все приватные ключи:\ngpg -K Так как gpg использует ассиметричное шифрование, то публичные ключи позволяют нам зашифровать данные, а приватные ключи позволяют нам расшифровать данные.\nЧерез gpg можно зашифровать любой файл, который будет невозможно прочесть без приватных ключей. Но нам нужно шифровать только пароли, так что поиграемся с этим как-нибудь в другой раз.\nУчимся пользоваться Pass # Инициализируем хранилище паролей, указав идентификатор наших ключей:\npass init email@mail.com Добавим свой первый пароль:\npass insert \u0026lt;site_name\u0026gt; Вводим дважды пароль и всё, наш первый пароль сохранен в зашифрованном хранилище.\nЕго можно посмотреть, набрав:\npass \u0026lt;site_name\u0026gt; Нас попросят ввести пароль для доступа к ключам, после этого ваш пароль будет отображен.\nЕсли набрать просто pass, то мы получим список имен паролей, например:\nPassword Store ├── notion.so └── openai.com Вот весь список команд:\n--clip -c -- put it on the clipboard cp -- Copy the password edit -- Edit a password with $EDITOR find -- Find password files or directories based on pattern generate -- Generate a new password using pwgen git -- Call git on the password store grep -- Search inside decrypted password files for matching pattern --help -- Output help message help -- Output help message init -- Initialize new password storage insert -- Insert a new password ls -- List passwords mv -- Rename the password rm -- Remove the password show -- Decrypt and print a password version -- Output version information Мы также можем хранить не только лишь пароль, но и связки login-password и различную другую информацию, для этого добавляем ключ -m\npass insert mysite.com -m Если я не хочу выводить куда-либо пароль, а просто хочу поместить его в буфер обмена, я сделаю вот так:\npass mysite.com -c # Copied mysite.com to clipboard. Will clear in 45 seconds. Перенос паролей и ключей на другие устройства # Эти пароли можно загружать даже в git-репозиторий, потому что они зашифрованы и ключи есть только у вас, но если вы не хотите выгружать их куда-то в сеть, скармливая их тем же Microsoft, тогда вам скорее всего захочится бекапить время от времени эти пароли куда-то на флешку или на телефон.\nДля этого нужно нужно сначала сделать экспорт ключей, потому что без них это бесполезные файлы.\nЭкспорт и импорт ключей # Публичный ключ, где email@mail.com ваш идентификатор, который вы указывали с именем:\ngpg --export -a email@mail.com \u0026gt; pub_email.gpg Приватный ключ:\ngpg --export-secret-key -a email@mail.com \u0026gt; sec_email.gpg Здесь ключ -a просит gpg экспортировать наши ключи в ASCII, в человеко-читаемом виде. Если вы не хотите, чтобы кто-то мог в принципе открыть и прочитать ключи каким-то текстовым редактором, то просто уберите ключ -a.\nЧтобы импортировать ключи:\ngpg --import pub_email.gpg \u0026amp;\u0026amp; gpg --import sec_email.gpg Синхронизация с мобильными устройствами # Решаем вопрос с движением паролей между устройствами # Тут есть 3 пути:\nСвой git-сервер в своей локальной сети, доступ к которому будет под VPN (тогда вам не придется орендовать IP у провайдера); Свой git-сервер где-нибудь у Digital Ocean или Selectel, например; Приватный репозиторий на gitlab. Думаю очевидно, что варианты идут по нисходящей в отношении приватности, но каждый из вариантов способен обеспечить достаточный уровень надежности, ключи шифрования только у вас, а загружать в git вы будете зашифрованные файлы.\nПопробуем идти от простого к сложному, начнем с приватного репозитория + passforios для телефона.\nСинхронизация через GitLab # Первым делом заводим аккаунт, генерируем ssh-ключ, включаем двухфакторную авторизацию и вот это вот всё.\nС регистрацией у вас не должно возникать проблем, поговорим только о генерации ssh-ключей для доступа по ssh:\nГенерируем ssh-ключи: ssh-keygen -t rsa -b 2048 -C \u0026#34;\u0026lt;your_email@email.com\u0026gt;\u0026#34; Прокидываем ключи в агент: eval $(ssh-agent -s) ssh-add ~/.ssh/id_rsa Копируем публичный ключ: cat ~/.ssh/id_rsa.pub Идем вот сюда и вставляем всё в поле Key Далее в обязательном порядке включаем двухфакторную авторизацию вот тут.\nНаш аккаунт готов, создаем приватный репозиторий тут, выбираем тип в поле Visibility Level PRIVATE.\nТеперь у нас есть приватный репозиторий и можно инициализировать локальный репозиторий, попутно сославшись на внешний. Все инстукции есть на странице созданного репозитория, нас интересует следующее: Ознакомились, проворачиваем следующую штуку:\ncd ~/.password-store \\ \u0026amp;\u0026amp; git init --initial-branch=main \\ \u0026amp;\u0026amp; git remote add origin git@gitlab.com:\u0026lt;your_username\u0026gt;/\u0026lt;repos_name\u0026gt;.git \\ \u0026amp;\u0026amp; git add . \\ \u0026amp;\u0026amp; git commit -m \u0026#34;Initial commit\u0026#34; \\ \u0026amp;\u0026amp; git push -u origin main Наши зашифрованные пароли лежат в закрытом репозитории. Отлично! Теперь пора синхронизироваться с телефоном. Я покажу это на примере iOS и приложение passforios. Устанавливаем его. Будьте внимательны, на третей строке, где мы добавляем ссылку на удаленный репозиторий, вам нужно указать своё имя пользователя и имя репозитория.\nДобавляем ключи шифрования в приложение Pass на iOS. Для этого следуем инструкциям на скриншоте: На последнем скриншоте есть инструкция по экспорту sub-key. Подобное мы делали выше, но там мы экспортировали сами ключи, а здесь будут использоваться саб-ключи. Продублирую этот текст сюда, что бы было проще скопировать и экспортировать.\ngpg --export -a \u0026lt;your_key_id\u0026gt; \u0026gt; ~/Documents/subkey.pub gpg --export-secret-subkeys -a \u0026lt;your_key_id\u0026gt; \u0026gt; ~/Documents/subkey Теперь эти ключи переносим на свой смартфон любым удобным способом (только не через мессенеджеры!!!). Я, например, перекидывал ключи через свой локальный ftp сервер. Вы можете перекинуть через NAS, если у вас есть, поднять ftp или samba-шару сделать. Короче, перенесите как угодно, только не через внешние сервисы.\nКонфигурируем git-репозиторий, для этого следуем инструкции на скриншоте: На этом шаге нам требуется указать ssh-ключ, и ссылку на репозиторий. Ключ для репозитория я советую сгенерировать еще один, конкретно для вашего приложения и добавить его на gitlab. Как генерировать ключ для репозитория и добавлять его мы обсуждали выше в п. 1.\nКогда вы добавите ssh-ключ и укажите ссылку на репозиторий посто нажимайте Clone и проверяйте. Всё должно работать и репозитории синхронизируются.\nСвой Git-сервер на DigitalOcean # Все готово, мы молодцы! Теперь мы можешь углубиться и синхронизироваться через личный gitlab-сервер, который захостим, например, на Digital Ocean. Принцип настройки самой синхронизации останется таким же, только адрес репозитория будет другим. О том, как поднять свой личный gitlab сервер есть отличная статья от самих\nDigital Ocean, лучше и понятнее этих ребят я не напишу, так что позволю себе просто сослаться на них.\nВнимание! для GitLab заявлены требования в минимум 4Гб оперативной памяти на сервере, так что имейте это ввиду, когда будете поднимать дроплет. Ценник получается слегка кусачий, так что держите эту информацию в голове. Также, если будете пользоваться услугами Digital Ocean не забывайте про мою реферальную ссылку!\nDigitalOcean предлагает реферальную программу, сделка будет честной, вам $100-$200 на 2 месяца, мне $25. За это время вы успеете попрактиковаться с облачными тулами, может быть решите разместить там свой проект. При регистрации вас попросят внести $6 на свой депозит, чтобы подтвердить, что вы реальный пользователь. Это цена дроплета на месяц.\nРеферальная ссылка: Регистрироваться по моей ссылке вовсе не обязательно. Этот текст не реклама и не промо. Как вариант вы можете использовать любой другой хостинг, который удобен или выгоден вам, но если у вас есть потребность отблагодарить меня за этот текст, то вы можете сделать это так, ну и получите себе бонус на 2 месяца.\nСвой локальный Git-сервер # Если нет желание оплачивать сервер, то вы всегда можете купить какую-нибудь Orange Pi (Предпочтительнее), Raspberry Pi или что-то похожее, главное с 4Гб оперативной памяти на борту, арендовать у вашего провайдера статический IP-адрес (100-150 р в месяц) или же просто поднять VPN и собрать в одну сеть под VPN ваши железки. Вы повторив инструкцию по установке GitLab сервера устанавливаете всё на ваш одноплатник и всё. Это самый надежный вариант. Данные в этом случае пренадлежат только вам и никому больше. Если вы поднимаете VPN, то это будет еще надежнее, потому что вы не отсвечиваете статическим IP-адресом наружу.\nМоё мнение по поводу синхронизации # Я считаю, что синхронизировать через gitlab.com мягко говоря не самая лучшая идея, несмотря на то, что если уведут файлы с паролями из репозиториев каким-то образом, их все равно не смогут расшифровать. Пока что =)\nНе хотелось бы оказаться в ситуации, когда в срочном порядке приходится менять пароли на сотни сервисах. Но! это всё еще гораздо безопаснее хранения паролей в iCloud, браузере или каком-либо сервисе! Это может быть первым шагом к вашей цифровой гигиене.\nЯ, очевидно, только за локальное хранение данных на своём личном маленьком сервере. Но часто это неудобно, для многих вообще бессмысленно и непонятно, но хранить пароли на сервере Digital Ocean или Selectel практически также безопасно, но выходит дороговато.\nВыбор за вами, все три варианта имеют смысл и обеспечивают безопасное хранение ваших паролей. Какие-то удобнее, но чуть менее безопасные, какие-то сложнее, но более безопасные.\nАддоны и приложения для Pass # passmenu - клиент для dmenu qtpass - GUI клиент на C++ и Qt Android-Password-Store - Android клиент passforios - iOS клиент pass-ios - iOS клиент (old) passff - Аддон для FireFox browserpass - Аддон для Chrome Pass4Win - Windows клиент gopass - GUI клиент на Go pass.applescript - OSX клиент Комментарии по статье # Все комментарии, вопросы и советы оставляйте под этой записью в telegram-канале.\nБлагодарности серому волшебнику # Если текст был полезен и ты не можешь усмирить желание быть благодарным, то можешь:\nВоспользоваться моей реферальной ссылкой на TimeWeb:\nВоспользоваться моей реферальной ссылкой на DigitalOcean:\nИли же закинуть монету в мой кошелёк (USDT и TRX кошельки одинаковые, да, это не ошибка):\nTether (TRC-20, USDT):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Tron (TRX):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Monero (XMR):\n4AbxbT9vrNQTUDCQEPwVLYZq2zTEYzNr9ZzTLaq9YcwVfdxwkWjZ6FsewuXVDXPk7x2rE6FZACmLePPgJEcY4rm1GSHkwTZ ","date":"21 February 2023","permalink":"/blog/pass/","section":"Blogs","summary":"В этой заметке мы разберемся, как нам безопасно хранить все свои пароли и каким образом снизить вероятность взлома своих аккаунтов.","title":"Pass — прячем свои пароли от посторонних глаз"},{"content":"","date":"21 February 2023","permalink":"/tags/password/","section":"Tags","summary":"","title":"password"},{"content":"","date":"21 February 2023","permalink":"/tags/security/","section":"Tags","summary":"","title":"security"},{"content":"","date":"26 January 2023","permalink":"/tags/automation/","section":"Tags","summary":"","title":"automation"},{"content":"","date":"26 January 2023","permalink":"/tags/cron/","section":"Tags","summary":"","title":"cron"},{"content":"В этой заметке мы рассмотрим, как нам автоматизировать скучные и рутинные задачи в linux через Cron.\nCron, ну-ка, повтори! # Привет, лентяй, сегодня будем углубляться в тему автоматизации и разберем мы все это на примере автоматизации бекапов MS SQL Server (это же будет валидно для бекапов PostgreSQL, разве что будет использоваться более простой синтаксис самого бекапа в psql). Поможет нам с этим Cron.\nСron oэто демон использующийся для периодического выполнения заданий в определённое время. Он умеет запускать нужные нам процессы и ничего более. Unix-way, помним, да?\nПроверим, установлен ли у нас Crontab\ncrontab -V # ➜ cronie 1.6.1 Если не установлено, ставим и погнали играться.\nCrontab, наш интерфейс для управления Cron # Cron имеет файл с заданиями, который называется crontab, для его редактирования существует такая конструкция:\ncrontab [ -u user ] file crontab [ -u user ] [ -i ] { -e | -l | -r } В простом случае для добавления задания нужно вызвать crontab -e, будет задан вопрос, в каком редакторе открывать файл с заданиями, после чего можно приступить к добавлению новых строк с заданиями.\nВажно: После каждой строки с заданием нужно вставлять пустую строку, даже после последней строки в файле, иначе Cron может посчитать файл не валидным, что может стать причиной неисполнения заданий. Краткое описание всех ключей:\nКлюч Значение Описание -e edit Изменить файл с заданиями -l list Отобразить задания -r remove Удалить все задания Создание задачи # Ниже удобный Cheatsheet, сохраняй себе, что бы не ломать каждый раз голову, а в тексте ниже мы подробно разберемся что где и как, что бы глядя на эту подсказку мы не терялись.\nВ общем случае структура задачи выглядит следующим образом:\n\u0026lt;MIN HOUR DOM MON DOW\u0026gt; \u0026lt;CMD\u0026gt; \u0026lt;PATH\u0026gt; Поле Описание Допустимое значение MIN Минуты 0-59 HOUR Часы 0-23 DOM День месяца 1-31 MON Месяц 1-12 DOW День недели 0-6 CMD Команда Любая команда, которую требуется выполнить PATH Путь до файла Абсолютный путь до файла (если требуется) Пример задачи, которая выполняется каждую минуту и сохраняет вывод в log:\n* * * * * sh /bin/script/anyscr.sh \u0026gt;\u0026gt;/tmp/logs/log.log 2\u0026gt;\u0026amp;1 Здесь * * * * * время выполнения, где, слева направо Минуты Часы Дни Месяц Неделя.\nФормат записи может быть таким:\n*/10 * * * * — каждые 10 минут 30 15 * * * — каждый день в 15:30 30 15 * * 6 — каждую субботу в 15:30 (Понедельник считается первым днем, воскресенье - это седьмой или нулевой день.) 5,35 16 * * * — запускать команду в 16:05 и в 16:35 0 7-19 * * * — каждый час, с семи утра до семи вечера Вместо номера недели можно использовать сокращение sun, mon, и тд. Так же есть удобные алясы для формирования времени задачи, такие как:\nКлючевое слово Эквивалент Описание @yearly, @annually 0 0 1 1 * Первый день в году @monthly 0 0 1 * * Первый день месяца @weekly 0 0 * * 0 Первый день недели @daily 0 0 * * * Ежедневно в 0 : 0 @hourly 0 * * * * Каждый час в * : 0 @reboot После загрузки Ну и накидаем простой файл с задачами, для примера:\n#Crontab task file @daily apt update * 12 * * * sqlcmd -S serv -U user -P \u0026#39;pswd\u0026#39; Q- \u0026#34;exec sp_databaseBackup\u0026#34; \u0026gt;\u0026gt;/tmp/logs/log.log 2\u0026gt;\u0026amp;1 * * * * * any_task Сразу давай оговоримся о проблемах, с которыми можно сталкиваться и как их решить.\nРешение проблем с Cron # Скрипт в задаче не выполнился и в логах пусто # Задание не выполняется и ничего не происходит, в логах grep CRON /var/log/syslog ничего нет, либо после строки с выполнением задания есть следующее:\n(alexandr) CMD (sh /bin/scripts/backup.sh \u0026gt;\u0026amp;/tmp/cron_log) (CRON) info (No MTA installed, discarding output Причина в том, что не был установлен пакет postfix, через который Cron отсылает отчет на почту. Мне отсылать отчеты на почту не нужно, но хочется все же смотреть логи, почему падает задача.\nРешение банальное \u0026ndash; нам нужно перенаправить вывод лога в нужный файл, добавив \u0026gt;\u0026gt;/tmp/cron_log 2\u0026gt;\u0026amp;1 после команды:\n0 6 * * * sh /bin/scripts/my_scr.sh \u0026gt;\u0026gt;/tmp/cron_log 2\u0026gt;\u0026amp;1 Теперь наш лог с ошибками будет лежать в /tmp/cron_log. Можно выяснять, что там в скрипте вызывало ошибку.\nСкрипт в задаче не выполнился и в логах command not found # Бывает так, что наша программа не прокинула в $PATH, не получается найти по ее имени её исполнительный файл.\nВ качестве примера возьмем sqlcmd. У меня в скрипте есть вызов этой программы, но в логах явно видно, что шелл не знает, что это такое, хотя если в терминале выполнить sqlcmd, мы видим, что программа то вызывается\u0026hellip;\nТут тоже решение достаточно простое \u0026ndash; нам нужно указать полный путь до исполнительного файла /opt/mssql-tools/bin/sqlcmd в нашем скрипте или в теле команды нашей задачи, тогда 100% мы дернем нашу программу и передадим ей нужный аргументы:\n/opt/mssql-tools/bin/sqlcmd -S srv -U usr -P \u0026#39;pswd\u0026#39; -Q \u0026#34;USE $db; EXEC sp_updatestats;\u0026#34; Автоматизируем создание бекапов # От слов к делу, попробуем применить наши знания на практике.\nПервым делом накидаем пару скриптов, которые будут выполняться по расписанию:\nСкрипт, который сбрасывает статистику базы данных (хз зачем он мне нужен был, но для примера пойдет):\n#!/bin/bash currentdate=$(date \u0026#39;+%Y-%m-%d__%H_%M_%S\u0026#39;) host=\u0026#39;\u0026lt;db_host\u0026gt;\u0026#39; username=\u0026#39;\u0026lt;db_username\u0026gt;\u0026#39; password=\u0026#39;\u0026lt;db_password\u0026gt;\u0026#39; # Обновление статистики. Помогает избежать возможных таймаутов. db=\u0026#39;\u0026lt;db_name\u0026gt;\u0026#39; /opt/mssql-tools/bin/sqlcmd -S $host -U $username -P $password -Q \u0026#34;USE $db; EXEC sp_updatestats;\u0026#34; Скрипт, кторый делает бекапы и складывает их в архив:\n#!/bin/bash # Запускать данный скрипт следует после экспорта переменных окружения, например: # export ANY_PASSWD=123qwerty \u0026amp;\u0026amp; export ANY_USER=admin \u0026amp;\u0026amp; export ANY_HOST=localhost \u0026amp;\u0026amp; sh \u0026lt;script_name\u0026gt;.sh # # Если скрипт используется только на локальной машине и только вами, # то просто захардкодите ваши данные для входа в базу данных currentdate=$(date \u0026#39;+%Y-%m-%d__%H_%M_%S\u0026#39;) host=\u0026#39;\u0026lt;db_host\u0026gt;\u0026#39; username=\u0026#39;\u0026lt;db_username\u0026gt;\u0026#39; password=\u0026#39;\u0026lt;db_password\u0026gt;\u0026#39; # Обновление статистики. Помогает избежать возможных таймаутов. db=\u0026#39;\u0026lt;db_name\u0026gt;\u0026#39; /opt/mssql-tools/bin/sqlcmd -S $host -U $username -P $password -Q \u0026#34;USE $db; EXEC sp_updatestats;\u0026#34; # Бекап базы данных \u0026lt;db_name_1\u0026gt; db=\u0026#39;\u0026lt;db_name_1\u0026gt;\u0026#39; path=\u0026#39;./Backup/\u0026#39;$db\u0026#39;-\u0026#39;$currentdate\u0026#39;.bak\u0026#39; /opt/mssql-tools/bin/sqlcmd -S $host -U $username -P $password -Q \u0026#34;BACKUP DATABASE $db TO DISK = N\u0026#39;$path\u0026#39; WITH NOFORMAT, NOINIT, NAME = N\u0026#39;$db-full\u0026#39;, SKIP, NOREWIND, NOUNLOAD, COMPRESSION, STATS = 10\u0026#34; # Бекап базы данных \u0026lt;db_name_2\u0026gt; db=\u0026#39;\u0026lt;db_name_2\u0026gt;\u0026#39; path=\u0026#39;./Backup/\u0026#39;$db\u0026#39;-\u0026#39;$currentdate\u0026#39;.bak\u0026#39; /opt/mssql-tools/bin/sqlcmd -S $host -U $username -P $password -Q \u0026#34;BACKUP DATABASE $db TO DISK = N\u0026#39;$path\u0026#39; WITH NOFORMAT, NOINIT, NAME = N\u0026#39;$db-full\u0026#39;, SKIP, NOREWIND, NOUNLOAD, COMPRESSION, STATS = 10\u0026#34; # Создание папки для бекапа и перенос бекапов в ту папку backup_folder=\u0026#39;backup-\u0026#39;$currentdate path=\u0026#39;/var/opt/mssql/data/Backup/*\u0026#39; path2=\u0026#39;/samba/urb106/Archive/Backups/Database/\u0026#39;$backup_folder mkdir $path2 #Перенос бекапов в папку samba mv $path $path2 # Архивирование и сжатие бекапов cd $path2 \u0026amp;\u0026amp; cd .. \u0026amp;\u0026amp; tar -czvf $backup_folder\u0026#39;.tar.gz\u0026#39; $backup_folder # Удаляем несжатые бекапы rm -rf $backup_folder Crontab файл будет таким:\n0 12,18 * * * sh /bin/scripts/update_stats.sh \u0026gt;\u0026gt;/tmp/cron_log 2\u0026gt;\u0026amp;1 0 6 * * * sh /bin/scripts/archive.sh \u0026gt;\u0026gt;/tmp/cron_log 2\u0026gt;\u0026amp;1 Первая задача будет выполняться каждый день в 12:00 и в 18:00, а вторая каждый день в 6 часов утра.\nТаким образом мы буквально одним-двумя скриптами при помощи cron сняли с себя рутинную задачу. При должном желании и воображении можно автоматизировать вообще что угодно только благодаря cron.\nБлагодарности серому волшебнику # Если текст был полезен и ты не можешь усмирить желание быть благодарным, то можешь:\nВоспользоваться моей реферальной ссылкой на TimeWeb:\nВоспользоваться моей реферальной ссылкой на DigitalOcean:\nИли же закинуть монету в мой кошелёк (USDT и TRX кошельки одинаковые, да, это не ошибка):\nTether (TRC-20, USDT):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Tron (TRX):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Monero (XMR):\n4AbxbT9vrNQTUDCQEPwVLYZq2zTEYzNr9ZzTLaq9YcwVfdxwkWjZ6FsewuXVDXPk7x2rE6FZACmLePPgJEcY4rm1GSHkwTZ ","date":"26 January 2023","permalink":"/blog/cron-first-look/","section":"Blogs","summary":"В этой заметке мы рассмотрим, как нам автоматизировать скучные и рутинные задачи в linux через Cron.","title":"Автоматизируем с Cron в Linux"},{"content":"","date":"14 December 2022","permalink":"/tags/coinbase/","section":"Tags","summary":"","title":"coinbase"},{"content":"","date":"14 December 2022","permalink":"/tags/cryptocurrency/","section":"Tags","summary":"","title":"cryptocurrency"},{"content":"","date":"14 December 2022","permalink":"/tags/visa/","section":"Tags","summary":"","title":"visa"},{"content":"Разбераемся, что такое клиптовалюты и что делать в 2022-2023, если нам требуется оплатить что-то в интернете, но наши карточки не работают.\nРазберем способы, как через криптовалюты, так и через посредников.\nДисклеймер! Автор не несет ответственность за ваши средства, которые вы переводите куда-либо. Я не получаю никаких бонусов от coinbase, paywithmoon или обменников. Все, что я опишу ниже сработало для меня, но вы делаете это на свой страх и риск. Вводная # Кто мы? Потребитель из интернета! Чего мы хотим? Отдать деньги тем, кто их не берет! Звучит как шутка, но такова реальность. Наша цель сегодня — научиться оплачивать сервисы, которые не могут или не хотят принимать платежи с нашим не работающих карт.\nСегодня мы научимся:\nПлатить за сервер DigitalOcean, на котором будет наш VPN; Платить за подписку на Netflix, Distrokid и тд; Покупать игры в американском PSn за крипту и в турецком за рубли и USDT; Покупать игры в Steam за рубли. Для реализации наших целей будем использовать целый арсенал сервисов, стейблкоинов, криптовалют и просто посредников.\nСервисы для работы через криптовалюту # Moon — сервис, который выпускает предоплаченные карты visa на срок 3 месяца без возможности дополнительного пополнения. Открывать (делать первое пополнение) мы будем через Coinbase.\nCoinbase — биржа, а также vault (wallet, keeper) для ваших монет. Хранить свои монеты там категорически не рекомендую, но как сервис-прокси coinbase самый подходящий под наши задачи. Покупать там мы ничего не сможем, так что вооружимся сервисом-агрегатором-обменником BestChange.\nBestChange — сервис, агрегирующий обменники. Именно сюда мы будем нести свои рубли, который будем на выбранном обменнике менять на нужную монету.\nBitrefill — сервис, на котором можно купить предоплаченные карты для разных сервисов 1 к 1 за Tether, например, для US-аккаунта PlayStation Store Gift Card на $50 за 50 USDT.\nBitlaunch — сервис для покупки серверов за криптовалюту. Не сказать, что это анонимно, так как просит ввести email, но можно использовать всякие temp-mail сервисы и Monero, например.\nКриптовалюты, которые нам понадобятся # Tether, USDT (TRC-20, Tron) — это фиатная криптовалюта, так называемый stablecoin. Использовать мы будем её TRC-20 версию, т.е. все транзакции будут идти через сеть Tron. В Tron комиссия ниже, чем в Ethereum сети, да и Tron купить проще, как мне показалось.\nBitcoin — в представлении не нуждается, я думаю. Первая и самая ликвидная крипто-монетка. При этом с кучей своих недостатков и достаточно медленными транзакциями.\nMonero — это анонимная криптовалюта. Все транзакции в этой сети анонимны и достаточно быстрые. Благодаря этой монетке можно анонимно покупать серверы через bitlaunch, например, менять Monero на USDT и прч.\nИнструменты для хранения и обмена # Пошли мы покупать монетки, а куда их класть то? Для хранения будем использовать Exodus.\nExodus, дом для наших монет # Exodus — мультивалютный крипто-кошелек. Он мне понравится тем, что имеет клиент почти под всё:\nСписок клиентов\niOS клиент Android клиет Linux клиент (но я ставил через flathub) Mac клиент (можно через Brew) Windows клиент Имеет большой список поддерживаемых крипто-валют, и вообще\u0026hellip; красивенький.\nExodus это не холодный кошелек. Он является компромисом между вашей безопасностью и удобством, но это все ещё лучше использования для хранения крипто-бирж, хоть и не так безопасно, как холодные или hardware-кошельки, типа Ledger, которые в России вы не сможите купить.\nНачнем с установки клиента и первых необходимых манипуляций.\nУстановим клиент на нужное устройство. Я ставил на свой iOS смартфон, затем уже на Fedora Linux. Как установить на смартфон — объяснять не нужно: App Store ⇒ Exodus.\nПри первом запуске приложение немножко призадумается (генерирует вам первые кошелечки), потом вы увидите перед собой главный экран. Нам нужно добавить 2 валюты для наших делишек: Tron (тикер: TRX) и Tether (тикер: USDT, со значком TRX). Для этого листаем вниз наш экран, затем нажимаем кнопочку “Add Mode”. В поиске пишем нужный тикер и рычажком включаем.\nВалюты добавлены. Tether нам пока недоступен, потому что мы не провели ни одной транзакции по Tron-сети. Как только мы купим немного TRX, Tether сразу разблокируется.\nНам надо озаботится нашей безопасностью. Чтобы мы могли, например, поставить клиент еще и на PC или Mac и восстановить наши кошельки. Ну или в целом, чтобы мы могли восстановить наши кошельки. Для этого нажимаем на 4 квадратика в нижнем баре → Security → Backup → View Secret Phrase, зажимаем Press and Hold to Reveal и переписываем куда-нибудь на листочек 12 фраз именно в том порядке в котором идут. Очень важно сделать это без ошибок, так как иначе вы потеряете доступ ко всем своим кошелькам при утере доступа к этому приложению.\nПри установке клиента на другие устройства просто следуем в настройки и давим Restore from Backup, вводим последовательность.\nПриложение поставили, подключили 2 нужных валюты, выписали и надежно сохранили кодовую фразу — you are breathtaking! Можно покупать свою первую криптомонетку! Но для начала сделаем еще один обязательный шаг — заведем Coinbase аккаунт, что бы подружить нашу крипту с Visa, а не просто перекладывать рубли в биты.\nCoinbase, крипто-биржа # Так как нам в первую очередь нужно делать Visa-карты, а не просто развлекаться с криптой при огромных комиссиях на конвертация, то нам нужна будет учетка на Coinbase. Собственно сделаем её.\nИдем на сайт с выключенным VPN, что бы вы регистрировались как RU-регион. Это нужно для того, чтобы не попасть под анальную модерацию документов как в германии, например. Вы попросту не сможете валидировать свою учетную запись. Первый раз я именно на этом и накололся, так что обратите внимание.\nРегистрация простая, так что описывать её нет смысла. После регистрации просто валидируйте личность в кабинете, там потребуется указать адрес и цель, с которой вы пришли на coinbase. При регистрации через мобильное приложение вас сразу об этом спросят.\nСобственно\u0026hellip; все! Теперь мы можем брать свой номер Bitcoin кошелька (в моб. приложении Pay ⇒ Receive ⇒ BTC address ⇒ copy).\nДелаем Visa-карту с USD # BestChange или как выменять плащ на пинту эля в “Гарцующем Пони” # Начинаем двигаться в сторону валидной Visa-карты.\nСразу оговоримся почему мы не покупаем крипту на биржах:\nCoinBase или Binance требует паспортных данных, а мы не хотим их передавать. Процесс ввода-вывода средств для России сейчас, по понятным причинам, слегка не возможен. Наш вариант BestChange. Это площадка с очень строгой модерацией, так что все обменники там как минимум подвергаются тщательным проверкам. Никакой регистрации не требуется.\nВ левом столбике выбираем, чего мы хотим заплатить (я, например, в Online Banking, выбрал там Tinkoff), справа выбираем, что хотим получить.\nДля начала прикупим немножечко Bitcoin. Замечу, чем меньше сумма, которую вы покупаете, тем дороже может стоить обмен.\nВыбираем, например, Tinkoff → Bitcoin и наблюдаем примерно следующую картину:\nВыбираем понравившийся нам обменник, обращая внимание на значки возле названия. Нам нужно чтобы мы погли купить монетки без валидации карточки и прч. фигни, так что ищем обменник, где нет плашки \u0026ldquo;This exchanger can require verification of client\u0026rsquo;s bank card.\u0026rdquo; Обмен будет дороже, зато без лишнего головняка.\nЕсли хочется просто быстро менять денюжков на монетки и вы не стесняетесь присылать фото своей карточки сервису, то я бы даже мог посоветовать Kassa.\nКогда вы выбрали обменник, сам обмен будет проходить по сценарию \u0026ldquo;ты мне — я тебе\u0026rdquo;. Вы вводите сколько хотите купить, вам расскажут, сколько это будет стоить, после чего вы указываете свой BTC кошелек, который взяли с Coinbase и проводите оплату.\nВ случае с обычными обменниками вам просто скажут номер карты, куда отправить нужно точную сумму и нажать кнопку на сайте, что вы отправили, после чего через 10-15 минут вам поступят средства на ваш крипто-кошелек.\nВ случае с кассой, вроде как, все автоматизировано и платеж вы проводите прям на сервисе, а не в ручном режиме.\nКогда вы получили монеты на свой кошелек, можно приступать к созданию Visa-карты.\nMoon, превращаем вино обратно в воду # Идем на сервис Moon, регистрируемся там и привязываем свой coinbase аккаунт (Settings ⇒ Connect to Coinbase). Это нужно сделать для того, чтобы сервис мог видеть наш баланс и запрашивать Bitcoin из нашего кошелька.\nТеперь самое интересное — создаем новую карточку.\nЖмем Create a new card, выбираем Payment Method — Coinbase (BTC), вводим в Card Amount сколько мы хотим зачислить и нажимаем Continue. Я обычно ничего на coinbase не оставляю, так что у меня висит предупреждение.\nПосле чего сервис вам покажет вашу новую карту, где будет номер, дата и cvs-код.\nТеперь вы можете добавить эту карту в Apple Pay, Google Pay, использовать для оплаты любых сервисов и тд.\nВезде, где потребуется указывать конкретный адрес плательщика, нужно будет взять любой рандомный адрес с тех же гугл-карт. Для нашей карточки нудно брать US адрес.\nОплачиваем сервер на DigitalOcean # Почему разбираем пример с DigitalOcean? Потому что после июня 2022 года нельзя просто добавить карту как платежное средство. DigitalOcean перестал принимать предоплаченные карты и это хороший пример для разбора подобных ситуаций.\nЕсли мы не можем указать предоплаченную карту в качестве платежного средства, то у нас есть 2 варианта:\nИспользовать PayPal в качестве прокси-платежки, если у вас есть аккаунт не в России; Добавить карту в Apple Pay, Google Pay и тд. Я буду пользоваться вторым вариантом, потому что у меня с PayPall не прокатило: не дали сменить регион.\nПроходим процедуру добавления карточки в Apple Pay, для этого заблаговременно находим нам фейковый платежный адрес, например, на Google Map, просто ткнув в понравившейся дом, строение или гараж какой-нибудь, и ищем ZIP-code для него, например тут. Я выбрал штат Nashville, конкретный адрес публиковать не буду по понятным причинам.\nКогда карточка будет успешно добавлена в Apple/Google Pay, заходим в личный кабинет через Safari, если у вас iOS и через chrome, если Android. Это важно, так как вам просто не отобразится в ином случае оплата через \u0026lt;\u0026hellip;\u0026gt; Pay:\nВот пример из браузера на PC или Firefox на iOS\nВот пример из Safari, появилась оплата Apple Pay:\nНажимаем оплату ApplePay, производим оплату и все, успех:\nПользуясь этой информацией можно пробовать оплачивать всякие подписочные сервисы, которые не принимают предоплаченные карту.\nВ любом другом случае просто указываете свою карточку в качестве основного платежного средства и все, все будет работать. Я проверял это на сервисе Distrokid, годовая подписка без проблем списалась с этой карточки.\nС прямыми оплатами понятно, а теперь посмотрим, что можно сделать через всякие прокси-сервисы.\nBitrefill, покупаем gift-карты для PSN, Netflix и тд. # Теперь упростим задачу. Мы не хотим регистрировать Coinbase аккаунт. Мы не хотим возиться с Visa-картами. Мы просто хотим принести крипту, которую купили и забрать код / gift / или что-то еще.\nИ снова в обменники # Первым делом закупимся криптой, на этот раз будем покупать USDT и Tron. Вспомним про наш Exodus, а точнее про первые шаги, описанные здесь. Нам требовалось добавить новые валюты, TRX и USDT. Можно сразу ответить на немой вопрос, зачем два если будем покупать за один? Все просто, для транзакций USDT использует сеть Tron (TRC-20), за каждую транзакцию мы обязаны оставлять \u0026ldquo;чаевые\u0026rdquo;. И вот чтобы оплачивать такую комиссию — нужны TRX.\nДля покупки повторяем шаги, описанные здесь, только выбираем не Bitcoin, а Tron (TRX).\nЯ свои TRX покупал на coinstar. Ценник высоковат, зато можно купить минимальной порцией чуть ли не от 800-900 рублей, но мы же здесь попробовать, верно? Так что за любопытство заплатим немножко больше.\nЗаполняем необходимые поля. Номер своего Tron (TRX) кошелька можно скопировать из Exodus. На главном экране нажимаем на TRX → Стрелочка, направленная вниз → Your TRX Address (тапни, что бы копировать).\nДалее вам выдадут номер карты на которую нужно совершить перевод и после нажмете соответствующую кнопочку на сайте. 5-10 минут и TRX будут зачислены.\nПосле этого у вас разблокируется и USDT, потому что у вас будет проведена транзакция по Tron сети и будут TRX для оплаты tee за переводы (1 перевод 3-8 TRX).\nЯ также еще покупал Monero. Это анонимная криптовалюта и анонимный блокчейн. А так же его легко конвертировать в USDT, например вот тут. Но это вовсе не обязательно. USDT (TRC-20) вы можете купить и за рубли используя всё тот же BestChange.\nВажно! Всегда проверяйте, что вы покупаете или переводите средства через TRC-20 сеть, потому что мы используем Tron, иначе монетки не попадут к вам на счет и никто не вернет вам деньги. Если вы хотите использовать другую сеть, то для начала добавьте в Exodus нужные ассеты, пример на скриншоте ниже. Покупаем gift # Теперь у нас есть USDT и мы хотим купить себе gift-карту, например, для американского PSN, пусть будет на $50.\nИдем на Bitrefill, выбираем сверху USA, проваливаемся в раздел Gift Cards и категорию Games.\nДалее находим интересующий нас gift. В нашем случае PlayStation Store, выбираем, сколько нам нужно и средство оплаты указываем USDT.\nДальше просто следуем инструкции. На экране оплаты должен появиться QR-код. Сканируете его через Exodus, оплачиваете и ждете подарок на почту.\nПокупаем игры на турецкий PSN-аккаунт # До недавнего времени можно было сделать себе карту в каком-нибудь Ozan, переводить деньги на счёт через Swith и тд и тп. Теперь такой возможности нет, но есть лазейки.\nЭто часть заметки для тех, кто не хочет переплачивать посреднику, если вы не из таких, смело листайте ниже до раздела покупки через третьих лиц.\nВиртуальная карта OlduBil + USDT # Устанавливаем на свой смартфон приложение OlduBil (iOS, Android). При регистрации указывайте регион \u0026ldquo;Казахстан\u0026rdquo;, у них код тоже +7 и смс будут приходить без проблем.\nПолностью описывать процесс я не буду, так как пользователь DTF — Йети сделал это за меня в этой большой статье.\nНадо отметить, что в его способе используется Binance. Как сейчас обстоит дело не могу сказать, но зато вы не сильно переплатите при покупки таким способом.\nЭтот способ я лично не проверял, но включать в эту заметку ссылку на этот способ стоило. Кто пользовался этим методом, вроде как, все отзываются положительно. Сам я не буду проверять, т.к. не хочу регистрироваться на Binance.\nUPD: Этот способ я проверил, на моммент 02.2023 все работает хорошо, проверку документов на Binance проводят чуть ли не за 10 минут после отправки. С покупкой через P2P по гайду из статьи Йети не возникло никаких проблем, все работает.\nКурс ~3.85 рублей за лиру выходит. PSN-кошелек у меня пополнить не вышло, какая-то ошибка постоянно выскакиевает, но игры покупаются без проблем. Для сравнения при покупке через посредника цена лиры минимум 4.5 рублей.\nЕсли вы хотите, чтобы я подробно описал весь процесс покупки через Binance, оставляйте комментарии под этой записью в telegram-канале.\nПокупка через посредника # Тут будет все гораздо проще, ну и заметно дороже.\nЯ покупал непосредственно через этих ребят.\nПроцесс очень простой, вы закидываете в свою карзину все, что хотите купить, умножаете получившийся ценник на 5, что бы понимать, сколько это будет вам стоить, пишете ему, передаёте логин и пароль от турецкого аккаунта и ждете дальнейших указаний.\nПродавец услуги вам скажет, что сейчас можно нажать \u0026ldquo;купить\u0026rdquo;. Всё. Дальше вы просто оплачиваете ему услугу. Т.е. сначала он покупает вам все, что нужно, после вы оплачиваете.\nВы ничем не рискуете. Но не надо пытаться обмануть как-то продавца, это плохо кончится, т.е. там есть большой чат единомышленников, который просто закидает ваш аккаунт репортами, с пометкой, что вы оплачиваете товар краденной картой.\nSteam — переезд в Казахстан # Из ру-региона ушли многие издатели, страница в steam очень победнела, а купить игры, те, которые еще не успели уйти, стало проблематично.\nСервисы пополнения кошелька steam есть и их много, но что покупать-то?\nРешим проблему проще — мы едем в Казахстан.\nПредварительные приготовления # Я советую сделать вам перечень следующих действий перед тем, как мы отправимся к продавцу услуги:\nЗайти сюда и проверить, что бы было пусто. Если что-то есть — удаляем; Сменить пароль за пару дней до процедуры; За пару дней до смены региона не проводить никаких сделок на площадке и не покупать игры; Подключить, если не была подключена, двухфакторная авторизация. Все это позволит свести к минимуму откат региона.\nПереезжаем # Идем за услугой сюда. Никаких VPN включать не нужно. Не лишним будет почитать FAQ, который для вас составил автор; Покупаем услугу и просто ждем, когда с вами свяжется продавец (как правило минут 10-15); Общаетесь с продавцом, предоставляете ему данные от аккаунта, код двухфакторной авторизации и тд; Он покупает на ваш аккаунт с новой виртуальной карты какую-то мелочь, и у вас меняется регион. Данный по карте в виде скриншота продавец вам скидывает в том же чате. Это на случай, если steam всё же решит октатить вам регион (на моей памяти ни у кого, при соблюдении правил, не откатывали).\nВажно!\nНе возвращайте купленную продавцом игру, это приведет к откату региона! Воздержитесь от пополнения кошелька день-другой. После того, как вам сменили регион самое время задуматься, как заводить деньги на свой обновленный аккаунт. На помощь нам придёт Qiwi или Web Money (с его просто анальной модерацией).\nQiwi # Устанавливаем приложение на свой смартфон (iOS, Android); После регистрации подтвержаем статус аккаунта через гос-услуги; Заводим новый Тенге-кошелек: Чтобы пополнить Тенге-кошелек, сначала пополняем рублевый счет, потом уже Тенге-счет.\nДалее просто пополняете свой Steam аккаунт. Ищите в поиске qiwi Steam (Казахстан) и вводите свой steam-логин.\nПару слов о WebMoney # С WM все будет несколько сложнее. Вам, без шуток, придется читать стихотворение на камеру с паспортом в руках. Я этого делать не хочу, но вы должны знать и о таком методе оплаты.\nКомиссия через WM ниже, чем через Qiwi, но не на столько, что бы возиться с подтверждением своего аккаунта.\nБлагодарности серому волшебнику # Если текст был полезен и ты не можешь усмирить желание быть благодарным, то можешь:\nВоспользоваться моей реферальной ссылкой на TimeWeb:\nВоспользоваться моей реферальной ссылкой на DigitalOcean:\nИли же закинуть монету в мой кошелёк (USDT и TRX кошельки одинаковые, да, это не ошибка):\nTether (TRC-20, USDT):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Tron (TRX):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Monero (XMR):\n4AbxbT9vrNQTUDCQEPwVLYZq2zTEYzNr9ZzTLaq9YcwVfdxwkWjZ6FsewuXVDXPk7x2rE6FZACmLePPgJEcY4rm1GSHkwTZ ","date":"14 December 2022","permalink":"/blog/crypto-visa/","section":"Blogs","summary":"Разбераемся, что такое клиптовалюты и что делать в 2022-2023, если нам требуется оплатить что-то в интернете, но наши карточки не работают.","title":"Валидная Visa, оплата покупок в интернете или \"Крипта, туда и обратно\""},{"content":"Познакомимся с ARMStrong, рассмотрим принципы построения и задачи, которые перед нами стоят.\nARMStrong (Automated Radiation Monitoring System) — автоматизированная система радиационного контроля, (далее СРК) включающая в себя комплекс средств, призванных осуществлять радиационный контроль, в целях снижения травматизма, предупреждения предаварийных ситуация и недопущения развития аварийных сценариев.\nСистема представляет собой open-source набор средств, призванный решать строго определенный набор задач. Авторы не несут ответственность и предоставляют систему \u0026ldquo;как есть\u0026rdquo;.\nВесь код по мере доработки будет публиковаться в репозитории Digital Armstrong. Все контакты для связи указаны в шапке репозитория.\nБазовая архитектура # ARMStrong реализует базовую трехуровневую архитектуру представленной на рисунке 1, и является вторым и третьим уровни соответственно.\nНазначение # ARMStrong на сегодняшний день обеспечен следующим функционалом:\nСбор, обработка и хранение информации с блоков детектирования (далее БД); Осуществление управления БД; Агрегирование данных с целью в виде числовых значений и графиков; Свето-звуковое оповещение при превышении предаварийных и аварийных пороговых значений; В будущем присутствует возможность добавления функционала для:\nРасширения парка поддерживаемых устройств с аналоговым выходом или поддерживающих протокол RS-485, например, управление электромагнитными клапанами или новым БД; Построения тепловых карт по собранным данным; Архитектура 2-го и 3-го уровня # Второй уровень представляет собой измерительные каналы и каналы свето-звуковой сигнализации. Каналы объединяются параллельно и подключаются к серверу сбора и обработки данных (далее ССОД) по RS-485 линии связи.\nВ свою очередь ССОД после получения и обработки данных с измерительных каналов сохраняет значения в базу данных, расположенной на сервере (далее СБД).\nКоммутатор устанавливается для объединения всех серверов в стойке в одну локальную сеть, чтобы ССОД могли иметь доступ до СБД.\nМаршрутизатор устанавливается в стойку для организации локальной сети внутри каждой серверной стойки, что повышает отказоустойчивость в случае обесточения и отказа внешних маршрутизаторов. Организация доступа к данным может осуществляться как прямыми запросами в базу данных, так и через API для зарегистрированных и аутентифицированных WEB-клиентов.\nHardware уровень # Измерительный канал, который получил название АСРК (Автоматизированное Средство Радиационного Контроля) выполнен на печатной плате на базе микроконтроллера ATMega-8. Интерфейсы подключения:\nАналоговый вход: разъем типа РМ; Комбинированный выход: коннектор 5-pin (2-pin A-B Data + 3-pin DC 12V); Логические выходы: штырьковые разъемы. Размеры одного готового к подключению канала всего 70 * 35 * 35 миллиметров, а без разъема типа РМ и вовсе составляет 42 * 21 миллиметра.\nИзмерительный канал подключается к персональному компьютеру или серверу при помощи преобразователя интерфейсов RS-485 \u0026ndash;\u0026gt; USB. В нашем случае используется преобразователь интерфейсов ОВЕН АС4-М\nПО контроллера # Програмное обеспечение контроллера (далее ПОК) написано на языке программирования C и скомпилированно под ATMega 8.\nПОК реализует самописный протокол обмена данными, который основан на стандартизированном промышленном протоколе Modbus.\nПОК позволяет осуществлять:\nНазначение адреса канала; Назначение режима обработки сигнала от БД (Частотный / Времянной / Счет отключен) Управление бленкером, генератором и другими средствами самопроверки БД; Осуществление перемотки кадра лентопротяжного механизма БД; Управление свето-звуковой сигнализацией. Опрос значений измерений БД; Управление свето-звуковой сигнализацией. Предоставляемые возможности # Помимо описанных возможностей в разделе ПО контроллера, канал связи может быть исполнен в разных конфигурациях и с разным количеством логических портов.\nКанал связи может быть дооснащен дисплеем и аккумулятором, и использован в качестве автономного, носимого, прямопоказывающего БОИ (блока обработки информации), для подключаемого к нему БД.\nТакже канал связи может быть использован в качестве дооснащения существующих БД или при изготовлении новых БД для организации прямого подключения, т.к. размеры платы очень малы, а потребление всего 0.010-0.015 Ампера.\nСфера применения платы канала связи АСРК не ограничивается только стационарными решениями для обеспечения радиационной безопасности, за счет малого потребления тока и малых габаритов это устройство может помогать решать достаточно широкий спектр задач.\nСерверный уровень # Уровень хранения информации # База данных # В качестве сервера базы данных в нашем случае используется сервер \u0026hellip; оснащенный 4 жесткими дисками, емкостью по 4 террабайта каждый и обьединенными в RAID10 массив, что повышает отказоустойчивость и осуществляет первичное резервирование данны.\nВажно!\nКаждый такой сервер, обеспечивающий работу базы данных, должен быть оснащен дополнительным комплектом из минимум 4-х аналогичных жестких дисков для обеспечения подменного фонда.\nНа сервер установлена бесплатная, с открытым исходным кодом операционная система на базе ядра Linux — Ubuntu 20.04 LTS.\nВ качестве СУБД используется бесплатная с открытым исходным кодом СУБД PostgreSQL.\nУровень обработки данных # Уровень обработки данных:\nОсуществляет опрос измерительных каналов в заданном интервале времени; Преобразует полученные данные в системные и несистемные величины в соответствии с типом БД, такие как: мЗв/ч (мкР/с) или Бк/м. куб. (Ки/л); Сохраняет полученные данные с временной меткой в базу данных; Осуществляет управление свето-звуковой сигнализацией в соответствии с установленными порогами на каждом канале через канал связи АСРК; Осуществляет агрегирование данных для расчетов выбросов газа из вентсистем в заданных промежутках времени; Осуществляет агрегирование данных для отображения графиков; Осуществляет управление БД через канал связи АСРК; В качестве сервера ССОД используются промышленные компьютеры AdvantiX, но могут использоваться и менее громозкие и дорогие решения, так как требования ПО ССОД к вычислительной мощности ССОД достаточно низкие. В качестве таких решений могут выступать даже одноплатные компьютеры, типа Raspberry PI 4 или их аналоги, поддерживающие запуск х64 Linux.\nПервоначально ПО ССОД написано на C#, .net framework 4.7 под ОС Windows с графическим интерфейсом, который выступал и сервером и клиентом:\nНо на данный момент, с целью миграции на системы на базе ядра Linux, основная часть ПО сервера была переписана на C#, net core 6, и теперь является кросс-платформенным серверным решением, а клиент был выделен в отдельное desktop и web-приложение (в разработке).\nПО ССОД запускается в изолированном контейнере, который в случае непредвиденных ошибок будет автоматически перезапущен. Подход с использованием контейнеров позволяет не устанавливать зависимости на серверные машины (весь runtime включен в состав сборки) и в случае поломки позволит в кратчайшие сроки без лишних манипуляций запустить сервер на новой / резервной серверной машине.\nКонтейнеризация ПО ССОД так же обеспечивается free-open-souce ПО.\nКлиентский уровень # Desktop-клиент написан на C#, net core 6 с использованием библиотеки WPF, представляет собой средство отображения информации со всей системы, такой как:\nРезультаты измерения с БД; Состояние пороговой сигнализации и измерительных каналов; Состояние всех доступных ССОД; Графики значений по точкам контроля. Клиент позволяет:\nУстанавливать на контроль один из выбранных каналов, что позволяет в реальном времени отслеживать динамику на живом графике в нижней части клиента; Выбирать способ сортировки и отображения каналов (отображать только превышения / конкретный сервер / отказавшие каналы и др.) Внешний вид клиента:\nupd v0.0.3, добавили возможность:\nВыводить отчёт за 24/6/2 часа по выбросам с вентсистемы, спецконтролю и йодному участку; Выводить мультиканальные графики за выбранный период времени как в отдельном окне, так и в нижнюю секцию клиента; Отображать состояние серверов системы; Обновленный клиент:\nВ данный момент ведется активное расширение функционала клиента.\nВ планах # Объединенная Web-платформа # Платформа пишется на языках Ruby, JavaScript и C#, будет включать в себя комплексное решение для упрощения взаимодействия служб, упрощенный доступ до данных системы радиационного контроля, унифицирования информации, с целью упрощения доступа к ней сотрудников аутентифицированных служб.\nВсе средства используемые в разработке являются open-source решениями использующими свободные лицензии.\nWeb-клиент системы РБ # Решаемая проблема:\nСуществующий клиент требует своей установки на персональный компьютер или рабочую станцию каждому конкретному пользователю; В случае обновления существуют трудности с доставкой файлов обновления до клиента и существует вероятность непредвиденных ошибок, которые потребуют помощи специалиста; Часть пользователей могут иметь отличные от поддерживаемых операционную систему или не иметь персонального компьютера вовсе, а, например, иметь только планшет на iOS или Android =\u0026gt; пользователь не может получить оперативный доступ к данным системы радиационного контроля. Решение: WEB-клиент, входящий в состав платформы.\nЭтот клиент будет отображать графики, значения с точек контроля и состояние каналов, при этом не требуется ничего, кроме браузера, который сейчас есть на любом устройстве.\nАвторизированный доступ осуществляется только для сотрудников УРБ и / или имеющих соответствующий доступ аутентефицированнмы пользователям в режиме чтения.\nРаботы по разработке WEB-клиента уже ведутся.\nПомощник службы РБ, доз. контроль # Решаемая проблема:\nОформление допусков дозиметристом занимает много времени; При оформлении допуска дозиметристу требуется вручную расчитывать время пребывания исполнителя в требуемом помещении, исходя из параметров, полученных из системы радиационного контроля. Требуется ведение дополнительных журналов контроля дозовых нагрузок, с целью недопущения переоблучения персонала. Решение: Помощник для службы РБ, входящий в состав платформы.\nПри оформлении электронного допуска, вся требуемая информация будет автоматически расчитана и учтена из данных, полученных от системы радиационного контроля. Система также обязана учесть возможность допуска сотрудника до работ, приняв во внимание его дозовую нагрузку за установленный период времени.\nДозиметристу останется только дать своё согласие на допуск сотрудника, а по завершению работ внести набранные дозы в допуск и закрыть его. Информация о набранной дозе будет учтена в базе данных сотрудников.\nАвторизированный доступ осуществляется только для сотрудников УРБ и / или имеющих соответствующий доступ аутентефицированнмы пользователям.\nПомощник для службы ОМИТ # Решаемая проблема: В данный момент:\nсуществуют затруднения в коммуникации между отделами ОМИТ и службами, которым требуется осуществлять госповерку средств измерения при помощи ОМИТ; для отправки, получения, осуществления поверки требуется заполнять слишком много лишних бумаг; бумажные паспорта приборов быстро изнашиваются и часто могут теряться, требуют дополнительного внимание сотрудников служб ОМИТ, многие документы приходится заполнять 2 и более раз в разной форме. Решение: Система \u0026ldquo;Тикетов\u0026rdquo;, входящая в состав платформы, позволяющая создавать задачу пользователю, который осуществляет отправку прибора с меткой, в примерном виде:\nСлужба Пользователь Цель Тип Коэффицент УРБ-106 Суперинженеров Иван Демьянович Поверка БДМГ-41-01 2.4 Пользователю достаточно будет выбрать только цель отправки устройства и сам прибор, вся сотальная информация будет получена из базы данных, и передать устройство в доставку.\nИнспектор в свою очередь получит оповещение, что ему направлена задача, с возможностью просмотреть подробную информацию об устройстве, отправителе, износе направляемого устройства, предыдущих поверках и тд.\nПользователи, отправляющие прибор, смогут видеть статус поверки прибора, например:\nПринят в службе ОМИТ; Отправлен на ремонт; Продлён срок эксплуатации; Не подлежит продлению и тд. Эта часть системы работает по аналогии с канбан-доской, где создается задача и ее статус меняется пользователем по завершению какого-либо этапа работы.\nТакая система позволит:\nОтказаться от физических, бумажных паспортов средств измерения; Прогнозировать и перераспределять нагрузку на отдел ОМИТ; Сократить процент \u0026ldquo;просроченных\u0026rdquo; сроков госповерки средств измерения; Сократить процент \u0026ldquo;затерявшихся\u0026rdquo; средств измерений, отправленных на поверку; Осуществлять в автоматическом режиме подготовку нужных документов для продления сроков служб средств измерений / осуществлять продление. В индеальной картине на складах должны быть установлены сканеры QR- или штрих-кодов, для увеличения пропускной способности пунктов приема и отправки. В таком случае движение приборов отслеживается более гибко как отправителем, так и инспектором.\nАвторизированный доступ осуществляется только для сотрудников ОМИТ и / или имеющих соответствующий доступ аутентефицированнмы пользователям в режиме чтения.\nОбъединение частей систем в единый комплекс # Системы мониторинга состояний отдельных юнитов системы # Когда серверов становится больше одного, отслеживание состояний машин становится достаточно трудозатратной задачей, требующей постоянного присутствия специалиста. Современные средства позволяют осуществлять наблюдение за парком устройств в автоматическом режиме и заблаговременно оповещать о проблемах, например, об заканчивающимся месте на жестких дисках, оперативной памяти или зависании машины, перегрев и тд.\nВ качестве сервера мониторинга мы будем использовать Zabbix + Graphana. Они позволят отслеживать состояние машин, отображать в виде графиков нужную информаци, информировать о различных ошибках или изменениях отслеживаемых параметров.\nБлагодаря применению таких средств, мы сократим время простоя участков системы и увеличим отказоустойчивость. Система будет легко расширяемой не только за счет простого масштабирование серверной части ARMStrong, но и за счет систем мониторинга zabbix и graphana.\nБлагодарности серому волшебнику # Если текст был полезен и ты не можешь усмирить желание быть благодарным, то можешь:\nВоспользоваться моей реферальной ссылкой на TimeWeb:\nВоспользоваться моей реферальной ссылкой на DigitalOcean:\nИли же закинуть монету в мой кошелёк (USDT и TRX кошельки одинаковые, да, это не ошибка):\nTether (TRC-20, USDT):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Tron (TRX):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Monero (XMR):\n4AbxbT9vrNQTUDCQEPwVLYZq2zTEYzNr9ZzTLaq9YcwVfdxwkWjZ6FsewuXVDXPk7x2rE6FZACmLePPgJEcY4rm1GSHkwTZ ","date":"11 December 2022","permalink":"/project/armstrong/arms-about-the-system/","section":"Projects","summary":"Познакомимся с ARMStrong, рассмотрим принципы построения и задачи, которые перед нами стоят.","title":"ARMStrong: знакомство с системой радиационного контроля"},{"content":"","date":"8 December 2022","permalink":"/tags/blog/","section":"Tags","summary":"","title":"blog"},{"content":"","date":"8 December 2022","permalink":"/tags/hugo/","section":"Tags","summary":"","title":"hugo"},{"content":"Рассмотриваем, как нам поднять, захостить и настроить деплой нашего блога не заплатив при этом ни копейки (ну или совсем чуть-чуть).\nНе нужно путать Hygge и Hugo, эти слова созвучны, но почти ничего общего не имеют, кроме того комфорта, который предоставляет Hugo во время работы с ним.\nHugo — фреймворк, генератор статическиъ страниц, а Hygge — датский эпитет, описывающий теплое и приятное.\nНаш уютный друг Hugo # Hugo — генератор статических html файлов. Мы, соблюдая флоу этого парня, размещаем наш текст в markdown формате и наши изображения в нужных папках, а Hugo при запуске соберут из них html странички.\nУстановка и первый старт # Первом делом идем и читаем документацию. Нам понадобится установить git и сам Hugo.\nsudo dnf update sudo dnf install git hugo В документации Hugo есть много примеров установки на MS Windows, MacOS, Linux и даже BSD. Я использую Fedora 36, так что все примеры будут из неё, но, если вы используете что-то другое, разница будет не существенной.\nДалее нам нужно инициализировать новый блог. Забегая вперед, мы будем хостить блог на GitHub pages, а для этого у нас уже должен быть аккаунт на GitHub и создан репозиторий типа \u0026lt;username\u0026gt;.github.io, это имя я буду использовать для примеров далее:\nhugo new site \u0026lt;username\u0026gt;.github.io cd \u0026lt;username\u0026gt;.github.io Нам сразу надо озаботиться тем, чтобы в репозиторий не улетали лишние файлы, так что сначала создадим файл .gitignore, в который добавим только одну запись /public:\necho \u0026#34;/public\u0026#34; \u0026gt; .gitignore И только теперь инициализируем репозиторий:\ngit init git branch -M main git remote add origin git@github.com:\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git В целом это все, мы сгенерировали базовый проект, который уже работает. Но мы не будем использовать дефолтный блог, погнали выбирать тему и тюнить его.\nНастаиваем тему и тюним блог # Выбираем тему, которую будем использовать в нашем блоге тут.\nМне приглянулась, например PaperMod. Почти у каждой темы есть doc-страница, демо и ссылки на репозиторий с ней. Эта не исключение, идем читать README.\nУстанавливаем тему в наш проект:\ngit submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive Теперь нужно подключить нашу тему, для этого удалим старый и создадим новый файл настроек:\nrm config.toml vim config.yml Так делать нужно не всегда: иногда достаточно отредактировать config.toml; иногда требуется следовать flow-темы и переместить config.toml в папку config. Все это описано в документации к выбранной вами теме.\nДалее скопируем из документации в файл config.yml настройки, и немного потюнем под себя:\nbaseURL: \u0026#34;https://username.github.io/\u0026#34; title: My new site paginate: 10 theme: PaperMod enableRobotsTXT: true buildDrafts: false buildFuture: false buildExpired: false minify: disableXML: true minifyOutput: true params: env: production # to enable google analytics, opengraph, twitter-cards and schema. title: ExampleSite description: \u0026#34;This is long-long description...\u0026#34; keywords: [Blog, Portfolio, PaperMod] author: My name there images: [\u0026#34;\u0026lt;link or path of image for opengraph, twitter-cards\u0026gt;\u0026#34;] DateFormat: \u0026#34;January 2, 2006\u0026#34; defaultTheme: auto # dark, light disableThemeToggle: false ShowReadingTime: true ShowPostNavLinks: true ShowCodeCopyButtons: true ShowWordCount: true ShowRssButtonInSectionTermList: true UseHugoToc: true disableSpecial1stPost: false disableScrollToTop: false hidemeta: false hideSummary: true showtoc: false tocopen: false assets: favicon: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; favicon16x16: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; favicon32x32: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; apple_touch_icon: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; safari_pinned_tab: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; label: text: \u0026#34;Home\u0026#34; icon: /apple-touch-icon.png iconHeight: 35 # profile-mode profileMode: enabled: false # needs to be explicitly set title: ExampleSite subtitle: \u0026#34;This is subtitle\u0026#34; imageUrl: \u0026#34;\u0026lt;img location\u0026gt;\u0026#34; imageWidth: 120 imageHeight: 120 imageTitle: my image buttons: - name: Posts url: posts - name: Tags url: tags # home-info mode homeInfoParams: Title: \u0026#34;Hi there \\U0001F44B\u0026#34; Content: Welcome to my blog socialIcons: - name: twitter url: \u0026#34;https://twitter.com/\u0026#34; - name: stackoverflow url: \u0026#34;https://stackoverflow.com\u0026#34; - name: github url: \u0026#34;https://github.com/\u0026#34; cover: hidden: true # hide everywhere but not in structured data hiddenInList: true # hide on list pages and home hiddenInSingle: true # hide on single page # for search # https://fusejs.io/api/options.html fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] menu: main: - identifier: categories name: categories url: /categories/ weight: 10 - identifier: tags name: tags url: /tags/ weight: 20 - identifier: example name: example.org url: https://example.org weight: 30 pygmentsUseClasses: true markup: highlight: noClasses: false # anchorLineNos: true # codeFences: true # guessSyntax: true # lineNos: true # style: monokai Можем даже уже проверить, что у нас получается:\nhugo server По пути 0.0.0.0:1313 или localhost:1313 станет доступен наш блог.\nПо поводу детальной настройки темы читаем в документации к самоей теме.\nСоздаем первую запись в блоге # Теперь попробуем разобраться, как нам добавлять новые статьи на наш сайт.\nПо сути наши статьи это всего лишь markdown-файлы, которые мы помещаем в папку, например, posts/my_new_awesome_post, а далее Hugo конвертирует их в .html странички.\nСоздадим для начала папку для нашей статьи:\nmkdir -p content/posts/first-post vim content/posts/first-post/index.md Поместим туда шаблон статьи и что-то напишем:\n--- title: \u0026#34;My 1st post\u0026#34; date: 2022-12-08T11:30:03+00:00 tags: [\u0026#34;first\u0026#34;] author: \u0026#34;Me\u0026#34; showToc: true TocOpen: false draft: false hidemeta: false comments: false description: \u0026#34;Desc Text.\u0026#34; canonicalURL: \u0026#34;https://canonical.url/to/page\u0026#34; disableHLJS: true # to disable highlightjs disableShare: false disableHLJS: false hideSummary: false searchHidden: true ShowReadingTime: true ShowBreadCrumbs: true ShowPostNavLinks: true ShowWordCount: true ShowRssButtonInSectionTermList: true UseHugoToc: true cover: image: \u0026#34;\u0026lt;image path/url\u0026gt;\u0026#34; # image path/url alt: \u0026#34;\u0026lt;alt text\u0026gt;\u0026#34; # alt text caption: \u0026#34;\u0026lt;text\u0026gt;\u0026#34; # display caption under cover relative: false # when using page bundles set this to true hidden: true # only hide on current single page editPost: URL: \u0026#34;https://github.com/\u0026lt;path_to_repo\u0026gt;/content\u0026#34; Text: \u0026#34;Suggest Changes\u0026#34; # edit text appendFilePath: true # to append file path to Edit link --- # Заголовок ## Второй заголовок Какой-то **жирный** текст, который зачем-то _наклонили_. Проверим, что у нас там в блоге теперь:\nПоговорим подробнее, что мы сейчас сделали:\nМы создали в директории content директорию posts и вложили туда директорию для нашей статьи first-post; Создали в директории first-post файл index.md. Hugo всегда первым делом будет искать файл index.md, а за адрес до статьи будет принимать путь \u0026lt;category_dir\u0026gt;/\u0026lt;post_name_dir\u0026gt;/. В файл index.md закинули расширенную конфигурацию поста. Конфигурация поста всегда распологается в шапке файла между символами --- ---.\nПример базовой конфигурации в code-блоке ниже.\n--- title: \u0026#34;\u0026lt;Title\u0026gt;\u0026#34; date: \u0026lt;datetime\u0026gt; # \u0026lt;YYYY-mm-dd\u0026gt;T\u0026lt;HH:MM:ss\u0026gt;\u0026lt;+/-UTC\u0026gt; draft: true # or false --- Несем проект до хостинга и автоматизируем деплой # Мы сгенерировали сайт, добавили в него кастомную тему, даже пост какой-никакой написали. Все классно, но блог пока доступент только на вашей машине. Сделаем его общедоступным.\nПрокидываем секреты # Для автоматической развёртки на GitHub Pages требуется сгенерировать ключи, а точнее так называемые \u0026ldquo;секреты\u0026rdquo;.\nЕсли у вас не был настроен git, то прокинем сначала имя и email:\ngit config --global user.name \u0026#34;\u0026lt;Your Name\u0026gt;\u0026#34; git config --global user.email \u0026#34;\u0026lt;Your Email\u0026gt;\u0026#34; Генерируем ключи для деплоя:\nssh-keygen -t rsa -b 4096 -C \u0026#34;$(git config user.email)\u0026#34; -f deployment -N \u0026#34;\u0026#34; Заходим на GitHub в наш репозиторий (он пока еще пустой, мы в него ничего не пушили). Далее идем Settings ⇒ Deploy Keys ⇒ Add Deploy Keys.\nДобавляем сюда ваш публичный ключ. Скопировать его можно из только что сгенерированного файла:\ncat deployment.pub ssh-rsa AASdas...KTTx2lOvqFvqOMAIw== \u0026lt;your_email\u0026gt;@proton.com Скопировать фразу нужно целиком. Назовем его public key of ACTIONS_DEPLOY_KEY.\nUPD 24.08.2023: и ставим галочку внизу формы \u0026ldquo;Allow write access\u0026rdquo;! Далее идем в Secrets ⇒ Actions ⇒ New Repository Secret. Вставляет туда приватный ключ:\ncat deployment Также копируем фразу целиком от и до, называем ключ ACTIONS_DEPLOY_KEY.\nЧто бы скопировать что-то из терминала используйте хоткей CTRL + Shift + C.\nЕсли хочется совсем обойтись без мыши, то установите screen. Как пользоваться screen в этом ответе.\nUPD 24.08.2023: чтобы не получить ошибку, что deploybot не имеет доступа, двигаемся в Actions ⇒ General скроллим вниз до секции Workflow permissions и отмечаем пункт Read and write permissions. Настраиваем actions и пушим # В корне нашего блога создаем директории:\nmkdir -p .github/workflows В workflows создадим файл gh-pages.yml:\nvim .github/workflows/gh-pages.yml Скопируем туда это:\nname: GitHub Pages on: push: branches: - main jobs: build-deploy: runs-on: ubuntu-latest concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: gh-pages publish_dir: ./public Наконец-то пушим наш блог в удаленный репозиторий и ждем ошибок, потому что мы не настроили еще одну вещь:\ngit add . \u0026amp;\u0026amp; git commit -m \u0026#34;Init\u0026#34; \u0026amp;\u0026amp; git push -u origin main Идем в наш репозиторий и скорее всего там нифига не завелось, потому что не настроена ветка из которой деплоится сайт. Идем в Settings ⇒ Pages ⇒ Build and deployment.\nВ Source устанавливаем параметр Deploy from a branch и выбираем Branch, из которой будем деплоится gh-pages.\nИзменим что-нибудь в нашей тестовой статье и повторим пуш. Если деплой прошел успешно, то ваш блог станет доступен по адресу \u0026lt;username\u0026gt;.github.io.\nSay my name!.. Используем свой домен # Мы задеплоили, все настроили, но нам хочется припарковать свой домен или же купить его для начала.\nКупить домен можно где угодно. Я сам покупал на https://beget.com/ru/domains. Никаких рефералок у меня нет, увы, но там и без того самые дешевые домены в .com зоне. В .com зоне можно покупать домены не указывая паспортные данные, а в .ru нужно будет предоставлять паспорт.\nПредставили, что мы арендовали домен. Че дальше с ним делать?\nДля начала идем в панель управления вашим доменом у вашего регистратора, проходим в настроики DNS и добавляем записи типа А и AAAA. IP-адреса берем здесь. Не забываем удалить старый IP-адрес, который был дефолтным от регистратора.\nДалее настраиваем поддомен www. Добавим для него запись типа CNAME, который будет указывать на ваш зарегистрированный домен, таким образом будет происходит переадресация.\nДалее идем в корень нашего проекта и создаем там в папке static файл CNAME и кладем в него наш домен:\necho \u0026#34;\u0026lt;yourdomen.com\u0026gt;\u0026#34; \u0026gt; static/CNAME Теперь пушим в репозиторий изменения и идем рассказывать GitHub’у, что мы хотим использовать свой домен. Идем в репозиторий ⇒ Settings ⇒ Pages ⇒ секция Custom domain. Вписываем туда свой apex-домен (\u0026lt;yourdomen.com\u0026gt;) и нажимаем save. Домен должен проходить все проверки и GitHub самостоятельно подключит к нему tls-сертификаты.\nUPD 24.08.2023: GitHub теперь часто нормально не подхватывает сертификаты! Если вы столкнулись с проблемой запроса сертификата, то решение проблемы следующее:\nИдете в панель управления DNS, где арендовали домен Ищите там адрес www.\u0026lt;yourdomen.com\u0026gt; и создаете / редактируете CNAME запись, добавляя в нее прямую ссылку на ваш блог типа username.github.io, а не \u0026lt;yourdomen.com\u0026gt;. После этого идете обратно в нстройки репозитория Pages, удаляете ваш кастомный домен, минут 5 чиллите, пока пройдет деплой, и добавляете снова ваш домен в виде \u0026lt;yourdomen.com\u0026gt;, без всяких www. Пройдет проверка DNS и практически сразу буден выдан сертификатю\nПишем свои кастомные Shortcode # Shortcode — это специальная разметка, которую сможет понять Hugo и отобразить вам соответствующий результат после рендера.\nПредставим, что у нас появилась задача, которая шире, чем функционал выбранной вами темы. Например я захотел добавить на страницу карточку с моей музыкой, но ни у Hugo, ни у выбранной темы нет шорткода, что бы вставить карточку трека с bandcamp.com.\nВозникнет резонный вопрос: почему не вставить просто html в текст .md страниц?\nВопрос хороший. Также хороший вопрос, почему Hugo не позволяет так делать. Он выдасл на это действие ошибку и не сможет собрать нам страницу. Не беда, напишем свой кастомный шорткод.\nДля начала определимся, как мы хотим использовать его в тексте нашей статьи.\nПосмотрим на ссылку, которая ведет до нашего альбома, например:\n\u0026lt;domain\u0026gt;/EmbeddedPlayer/album=4206660389/size=large/bgcol=ffffff/... Изменяться у нас будет только album=4206660389, примем этот параметр как \u0026lt;type\u0026gt;=\u0026lt;id\u0026gt;. А использовать в разметке будем как:\n{{\\\u0026lt; bandcamp id=\u0026#34;\u0026lt;id\u0026gt;\u0026#34; type=\u0026#34;\u0026lt;type\u0026#34;\u0026gt; \\\u0026gt;}} Здесь и далее для этого шорткода я экранировал знаки \u0026lt; и \u0026gt; иначе он сработает =) С этим определились, теперь накидаем простенький шорткод. Для это создадим файл нашего шорткода bandcamp.html в layouts/shortcodes.\nlayouts └── shortcodes └── bandcamp.html Определим 2 переменные, в которые мы получаем значения и 1 логическую конструкцию:\n{{- $id := .Get \u0026#34;id\u0026#34; -}} {{- with .Get \u0026#34;type\u0026#34; -}} {{- if eq . \u0026#34;track\u0026#34; -}} \u0026lt;div style=\u0026#34;margin: 0px 10px 10px 10px;;\u0026#34;\u0026gt; \u0026lt;iframe style=\u0026#34;border: 0; width: 350px; height: 350px;\u0026#34; src=\u0026#34;https://bandcamp.com/EmbeddedPlayer/track={{ $id }}/size=large/bgcol=333333/linkcol=9a64ff/minimal=true/transparent=true/\u0026#34; \u0026gt; \u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; {{- else if eq . \u0026#34;album\u0026#34; -}} \u0026lt;div style=\u0026#34;margin: 0px 10px 10px 10px;\u0026#34;\u0026gt; \u0026lt;iframe style=\u0026#34;border: 0; width: 350px; height: 350px;\u0026#34; src=\u0026#34;https://bandcamp.com/EmbeddedPlayer/album={{ $id }}/size=large/bgcol=333333/linkcol=9a64ff/minimal=true/transparent=true/\u0026#34; \u0026gt; \u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; {{- end -}} {{- end -}} Вот этот кусок кода я беру с шаринг тулс бендкампа:\n\u0026lt;iframe style=\u0026#34;border: 0; width: 350px; height: 350px;\u0026#34; src=\u0026#34;https://bandcamp.com/EmbeddedPlayer/track={{ $id }}/size=large/bgcol=333333/linkcol=9a64ff/minimal=true/transparent=true/\u0026#34; \u0026gt; \u0026lt;/iframe\u0026gt; В нем я просто изменил захардкоженный id на свою переменную.\nНикаких дополнительных проверок делать не будем, чтобы не усложнять.\nДополнительно про кастомные шорткоды можно почтитать тут.\nДобавляем кастомные страницы # Теперь нам понадобилось добавить свою страницу, на которой будем рендерить какой-то кастомный контент. Например это страница с музыкой, на которой будут рендериться карточки с музыкой. Как нам добавить страничку и кнопку в меню?\nСоздаем директорию music в content, и помещаем туда файл index.md.\ncontent └── music └── index.md В index.md расскажем Hugo, что это новый слой и сразу воспользуемся нашим новым кастомным шорткодом:\n--- title: \u0026#34;Music\u0026#34; Description: \u0026#34;Music page\u0026#34; layout: \u0026#34;music\u0026#34; --- {{\\\u0026lt; bandcamp id=\u0026#34;3756810824\u0026#34; type=\u0026#34;track\u0026#34; \\\u0026gt;}} {{\\\u0026lt; bandcamp id=\u0026#34;1062007976\u0026#34; type=\u0026#34;album\u0026#34; \\\u0026gt;}} Далее нам нужно добавить сам слой в layouts. Создаем директорию page и кладём туда файл music.html.\nlayouts ├── page │ └── music.html └── shortcodes └── bandcamp.html Очень похоже на то, как мы добавляли шорткод.\nДалее пишем разметку страницы в music.html:\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;!-- Main Content --\u0026gt; \u0026lt;main id=\u0026#34;main-content\u0026#34; class=\u0026#34;grow\u0026#34;\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1 class=\u0026#34;mt-0 text-4xl font-extrabold text-neutral-900 dark:text-neutral\u0026#34;\u0026gt;Music\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;section class=\u0026#34;flex flex-wrap -mx-2 place-content-center overflow-hidden\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container my-3\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex flex-wrap\u0026#34;\u0026gt;{{ .Content }}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/main\u0026gt; {{ end }} Снова видим обёртку html в специфический синтаксис.\nТеперь остается рассказать нашей теме о том, что появилась новая кнопка в NavBar.\nИдем в конфигурационный файл вашей темы (в зависимости от темы его расположение будет отличаться), находим секцию с настройкой вашего меню и указываем ссылку на нашу страницу. Будет что-то вроде такого:\n[[main]] name = \u0026#34;Music\u0026#34; pageRef = \u0026#34;music\u0026#34; weight = 20 Все готова. Шаблон для странички написан, сама страница добавлена в контент и в конфигурационном файле мы сделали ссылку на нашу новую страницу.\nМожно посмотреть на примерный результат:\nУпрощаем сохранение и отправку изменений в блог # Финишная прямая. Делаем управление блогом чуточку удобнее.\nСделаем alias для сохранения и пуша изменений. Я использую oh-my-zsh, но для bash настройка будет аналогичная, только вместо .zshrc будет .bashrc.\nОткроем файл настроек нашего шелла:\nvim ~/.zshrc В самый конец файла дописываем строку:\nalias post-save=\u0026#34;git add . \u0026amp;\u0026amp; git commit -m \\\u0026#34;Added new post\\\u0026#34; \u0026amp;\u0026amp; git push\u0026#34; Перечитываем файл настроек, что бы изменения вступили в силу:\nsource ~/.zshrc Теперь, когда мы внесли какие-то изменения в настройки, например, или добавили статью мы можем выполнить, будучи в корневой папке блога:\npost-save И все, изменения полетят на GitHub, где все задеплоится и через пару секунд изменения отобразятся на вашем сайте.\nБлагодарности серому волшебнику # Если текст был полезен и ты не можешь усмирить желание быть благодарным, то можешь:\nВоспользоваться моей реферальной ссылкой на TimeWeb:\nВоспользоваться моей реферальной ссылкой на DigitalOcean:\nИли же закинуть монету в мой кошелёк (USDT и TRX кошельки одинаковые, да, это не ошибка):\nTether (TRC-20, USDT):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Tron (TRX):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Monero (XMR):\n4AbxbT9vrNQTUDCQEPwVLYZq2zTEYzNr9ZzTLaq9YcwVfdxwkWjZ6FsewuXVDXPk7x2rE6FZACmLePPgJEcY4rm1GSHkwTZ ","date":"8 December 2022","permalink":"/blog/hugo-simple-blog/","section":"Blogs","summary":"Рассмотриваем, как нам поднять, захостить и настроить деплой нашего блога не заплатив при этом ни копейки (ну или совсем чуть-чуть).","title":"Уютный блог на Hugo + GitHub Page"},{"content":"Рассказываю, как ARMStrong расчитывает выбросы через вентсистему и строит из них отчёты.\nКонтроль, контроль и еще раз контроль! Смотрим, какое количество активных газов мы выбрасываем, оцениваем их вес и формируем отчеты. Введение # На атомных, хим и металлургических предприятиях всегда требуется контроль за уровнем выхода активных веществ, которое сбрасывает предприятие. Эти уровни устанавливаются нормативными актами и не должны быть превышены.\nНа различных предприятиях отчетность ведётся по-разному, мы же разберем случай, когда есть оперативный контроллирующий персонал, который должен заносить запись об контроллируемой обстановке в оперативный журнал каждые n часов, в начале смены или же посуточно.\nДля этих целей был разработан небольшой модуль для клиента ARMStrong, который и будет формировать отчетность по выбрасываемым газам, средней активности на МЭД-точках контроля и \\(I_{131}\\)-участке.\nРассчитываем выбросы # Для справки: каждая точка представляет собой объект из истории измерений, который имеет три свойства: Id, SystemEventValuem и EventDateTime. public class History { public int Id { get; } public double SystemEventValue { get; } public DateTime EventDateTime { get; } } Что бы вычислить, сколько Бк было выброшено, нам нужно знать значение на момент начала расчёта, продолжительность выброса и значение на момент окончания расчёта. Значение на момент начала и окончания расчёта мы принимаем за \\(N_1\\) и \\(N_2\\) соответственно.\nЗа продолжительность выброса мы возьмем \\(\\Delta T\\), которая является просто разницей по времени между второй и первой точкой.\nТаким образом для вычисления выброса нам требуется две точки и выброс будет расчитываться как:\n\\(S = \\dfrac{N_1 + N_2}{2} \\Delta T\\)\nСреднее по этим точкам мы берем по причине, что не представляется возможным предугадать, в какой момент времени между двумя соседними точками начался рост или спад. Минимальное время регистрации можно устанавливать в 2.5 секунды, но ввиду особенности блоков детектирования типа БДГБ-02П и подобных сокращать окно практически бессмысленно, это не приводит к увеличению точность.\nДалее, чтобы вычислить суммарный расход, нужно просто просуммировать все результаты и умножить на расход по вентсистеме точки контроля.\nРасход хранится в формате \\(\\dfrac{м^3}{час}\\), поэтому требуется привести его к \\(\\dfrac{м^3}{сек}\\), для этого просто разделим его на 3600.\nУчитывая вышесказанное мы можем вывести формулу расчета выбросов и применить её в коде клиента:\n\\(S*{sum} = (\\sum{\\dfrac{N_1 + N_2}{2} \\Delta T}) C*{sec} \\), где:\n\\(S_{sum}\\) \u0026ndash; суммарный выброс по точке контроля, \\(Бк\\); \\(\\dfrac{N_1 + N_2}{2}\\) \u0026ndash; среднее значение по двум точкам, \\(\\dfrac{Бк}{м^3}\\) \\(\\Delta T\\) \u0026ndash; длительность выброса \\(T_2 - T_1\\), \\(сек.\\); \\(C*{sec}\\) \u0026ndash; расход газа через вентсистему точки контроля \\(\\dfrac{C*{hour}}{3600}\\), \\(\\dfrac{м^3}{сек}\\). Метод для расчета выбросов будет следующим:\npublic double GetSystemBlowout(List\u0026lt;History\u0026gt; histories, Channel channel) { double summaryBlowout, rawBlowoutSumm = 0; for (int i = 0; i \u0026lt; histories.Count - 1; i++) { DateTime firstPointDateTime = histories[i].EventDate; DateTime secondPointDateTime = histories[i + 1].EventDate; double deltaT = secondPointDateTime .Substract(firstPointDateTime) .TotalSeconds; double firstPointValue = histories[i].SystemEventValue; double secondPointValue = histories[i + 1].SystemEventValue; dobule averageValue = (firstPointValue + secondPointValue) / 2; rawBlowoutSumm += averageValue * deltaT; } double consumprion = channel.ChannelConsumption / 3600; summaryBlowout = rawBlowoutSumm * consumption; return summaryBlowout; } Группируем выбросы по категориям # На данный момент группы были захардкодены, и выглядит это следующим образом:\nprivate void SetBlowoutReportCategory() { int V1id = 275, V2id = 276, V3id = 277, V4id = 278, V4_id = 279, V5id = 280, V6id = 281, V7id = 282; int[] categoryI = new int[] { V1id, V7id }; int[] categoryII = new int[] { V2id, V3id, V4_id, V5id }; int[] categoryIII = new int[] { V6id }; if (categoryI.Contains(Channel.Id)) { BlowoutReportCategory = (int)BlowoutCategory.I; } else if (categoryII.Contains(Channel.Id)) { BlowoutReportCategory = (int)BlowoutCategory.II; } else if (categoryIII.Contains(Channel.Id)) { BlowoutReportCategory = (int)BlowoutCategory.III; } } Изначально немного неверно были спроектированы модели, мы отталкивались от существующей базы данных и в будущем будем это исправлять, ну а пока говнокодим хардкодим и проверяем как работает.\nВ коде выше мы просто отсортировали каналы по категориям. ID-каналов мы указали руками, какой в какую категорию должен отправляться, это тоже неверное, так делать нельзя но нам льзя.\nТеперь можно посчитать суммарную активность по категориям:\nprivate void StartReport() { int V1 = 275, V2 = 276, V3 = 277, V4 = 278, V4_ = 279, V5 = 280, V6 = 281, V7 = 282; int[] blowoutGroup = new int[] { V1, V2, V3, V4, V4_, V5, V6, V7 }; //... var I = new Channel() { ChannelName = \u0026#34;Категория I\u0026#34;, SystemEventValue = BlowoutReport .Where(x =\u0026gt; x.BlowoutReportCategory == 1) .Sum(x =\u0026gt; x.BlowoutSystemValue), NotSystemEventValue = BlowoutReport .Where(x =\u0026gt; x.BlowoutReportCategory == 1) .Sum(x =\u0026gt; x.BlowoutNotSystemValue) }; var II = new Channel() { ChannelName = \u0026#34;Категория II\u0026#34;, SystemEventValue = BlowoutReport .Where(x =\u0026gt; x.BlowoutReportCategory == 2) .Sum(x =\u0026gt; x.BlowoutSystemValue), NotSystemEventValue = BlowoutReport .Where(x =\u0026gt; x.BlowoutReportCategory == 2) .Sum(x =\u0026gt; x.BlowoutNotSystemValue) }; var III = new Channel() { ChannelName = \u0026#34;Категория III\u0026#34;, SystemEventValue = BlowoutReport .Where(x =\u0026gt; x.BlowoutReportCategory == 3) .Sum(x =\u0026gt; x.BlowoutSystemValue), NotSystemEventValue = BlowoutReport .Where(x =\u0026gt; x.BlowoutReportCategory == 3) .Sum(x =\u0026gt; x.BlowoutNotSystemValue) }; var summ = new Channel() { ChannelName = \u0026#34;Суммарная\u0026#34;, SystemEventValue = I.SystemEventValue + II.SystemEventValue + III.SystemEventValue, NotSystemEventValue = I.NotSystemEventValue + II.NotSystemEventValue + III.NotSystemEventValue, }; CategoryBlowoutBindingCollection = ReportsCollectionSingleton.GetInstance().CategoryCollection; CategoryBlowoutBindingCollection.Clear(); CategoryBlowoutBindingCollection.Add(I); CategoryBlowoutBindingCollection.Add(II); CategoryBlowoutBindingCollection.Add(III); CategoryBlowoutBindingCollection.Add(summ); } Тут все просто, суммируем по группе и все: \\(S_{cat} = \\sum N\\)\nДа, это некрасиво и очень неудобно, но для того, что бы проверить, как это работает — сойдет. В будущем ID-каналов и группы будут вынесены во внешний файл настроек.\nИз пояснений стоит сказать, что мы немного схитрили и используем объект канала, что бы вывести расчеты по группам в таблицу отчётов. Это в нашем случае удобно, что бы не плодить новые сущности, но нарушает концепцию и заводит в заблуждение других разработчиков. В будущем, возможно, над этим стоит поразмыслить.\nРассчитываем среднее по МЭД и йодному участку # Мы на финишной прямой! Осталось совсем немного — посчитать среднее по точкам контроля, которые следят за МЭД, т.е. за мощностью эквивалентной дозы и посчитать среднее по йодному участку.\nПриступим!\nСреднее считаеть будем просто: \\(S_{avg} = \\dfrac{N_1 + N_2 + N_n}{n}\\)\nДля удобства сделаем человеко-читаемые нотации категорий и типов блоков:\nenum DeviceType : int { EquivalenDoseRate = 1, GasVolumetricActivity, AerosolVolumetricActivity, Impulses }; enum Category : int { SpecialControl = 1, Blowout, Aerosol, Impulses }; Наполняем объект отчёта:\npublic Report(int id, DateTime startDateTime) { //... switch (Channel.DeviceType) { case (int)DeviceType.EquivalenDoseRate: ReportCategory = (int)Category.SpecialControl; AverageNotSystemValue = UnitConverter.Convert(type: (int)DeviceType.EquivalenDoseRate, value: AverageSystemValue); break; case (int)DeviceType.AerosolVolumetricActivity: ReportCategory = (int)Category.Aerosol; AverageNotSystemValue = UnitConverter.Convert(type: (int)DeviceType.AerosolVolumetricActivity, value: AverageSystemValue); break; default: AverageNotSystemValue = AverageSystemValue; break; } //... } Сам метод, который считает среднее, просто обычные LINQ-запросы:\nprivate double GetAverageSystemValue() =\u0026gt; ReportHistories.Any() ? ReportHistories.Average(avg =\u0026gt; avg.SystemEventValue) : 0; Отображаем пользователю отчёт # Код view-страниц показывать не буду, потому что там просто размечены таблицы и все. Там нет ничего сложного или непонятного:\nБерем объект отчёта Выводим в таблицу только то, что хотим видеть из него Мы рассчитали выбросы, посчитали МЭД и йод, теперь настало время показать пользователю то, что мы насчитали.\nОтображать отчёты будем в виде таблиц с эспандером, которым будут закрыты все лишние таблицы, что бы не отвлекали.\nПользователю будет предложен выбор интервала, за который он хочет получить отчет:\nДалее будет собран и отображен сам отчёт:\nВ планах # Добавить файл настроек, в котором можно будет перечислять группы и параметры, по которым будет происходить сборка отчетов; Добавить возможность вывода отчёта в файл и/или отправка отчёта по почте. Благодарности серому волшебнику # Если текст был полезен и ты не можешь усмирить желание быть благодарным, то можешь:\nВоспользоваться моей реферальной ссылкой на TimeWeb:\nВоспользоваться моей реферальной ссылкой на DigitalOcean:\nИли же закинуть монету в мой кошелёк (USDT и TRX кошельки одинаковые, да, это не ошибка):\nTether (TRC-20, USDT):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Tron (TRX):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Monero (XMR):\n4AbxbT9vrNQTUDCQEPwVLYZq2zTEYzNr9ZzTLaq9YcwVfdxwkWjZ6FsewuXVDXPk7x2rE6FZACmLePPgJEcY4rm1GSHkwTZ ","date":"6 November 2022","permalink":"/project/armstrong/arms-blowout-report/","section":"Projects","summary":"Рассказываю, как ARMStrong расчитывает выбросы через вентсистему и строит из них отчёты.","title":"ARMStrong: отчет по выбросам"},{"content":"","date":"6 November 2022","permalink":"/tags/report/","section":"Tags","summary":"","title":"report"},{"content":"","date":"19 July 2022","permalink":"/tags/python/","section":"Tags","summary":"","title":"python"},{"content":"Рассмотрим, как демонизировать наше python-приложение под Linux.\nДьявол в деталях # В начале сотворил он небо и землю На второй день разделил он свет и тьму\n\u0026hellip;\nНа седьмой день разобрался он с systemd, запустил в фоне службы, автоматизирующие процессы, и больше никогда не был online.\nПривет-привет, оклахома кидс! В этой заметке мы будем разбираться, что нужно делать дальше, когда мы написали приложение и у нас есть сервер.\nК сожалению, недостаточно просто выгрузить приложение на удаленный сервер и запустить скрипт, например так:\nPython3 ~/MyFirstDeploy/best_fucking_idea.py Приложение запустится и даже будет работать. Но есть одно но: после того, как вы вышли с сервера, закрыв ssh-соединение, вы закрыли все запущенные вами приложения в этой сессии, в том числе и запущенный скрипт, потому что вы закрыли не только ssh-соединение, а вообще закрыли сессию, которая была создана для этого пользователя.\nЧто бы такого не происходило приложение требуется демонизировать и вынести его выполнение за рамки конкретного пользователя. Это можно сделать как средствами операционной системы (этот метод описан в этой заметке), так и запрограммировать руками (но это пипец какой костыль, не находите?)\nВ операционных системах на базе Linux организация пользователей координально отличается от Windows. Это является сильной стороной Linux-base систем и одновременно с этим, по первости, добавляет нам проблем в копилку непонимания и ахуевания, но освоившись вы почувствуете все приемущества такого подхода к разграничению пользователей.\nКстати, благодаря такому подходу к организации пользователей в Linux-base системах и появился Docker, который стал стандартом дефакто в современном мире web-разработки, привнеся в неё контейнеризацию, которая позволяет в 1 клик поднять огромный сервис на тысячах машинах, а вторым кликом почти мгновенно масштабировать мощности сервиса. В операционных Linux-base системах все привычные в windows службы (service) называют демонами (daemon). Здесь и дальше под словом демон я буду подразумевать службу, которая выполняется в фоновом режиме.\nДемон (daemon) — это всего лишь компьютерная программа, которая под управлением систем инициализации блоков способна запускать процессы в фоновом режиме. И для того, чтобы наше приложение могло запускаться в виде демона / быть демоном, его нужно демонизировать. Этим мы и займёмся дальше, но сначала мы обратим внимание на заголовок статьи. Причём тут какой-то systemd?\nSystemd — это системный диспетчер. Аналогию можно провести с диспетчером задач, который является частью менеджера процессов в windows. Этот парень позволяет нам управлять почти всеми демонами в нашей операционной системе, помогает создавать конфигурации этих демонов и прч. Не все операционные системы на базе Linux используют systemd, так что это нужно учитывать. Systemd в свою очередь работает с помощью systemctl.\nSystemctl — это инструмент центрального управления для контроля системы инициализациии. С помощью этого парня мы будем запускать, останавливать и проверять статус нашего процесса.\nВводную получили, поехали стучать по клавишам!\nМой лучший друг — демон # Итак, у нас было:\nПриложение на Python Сервер на linux с systemd Огромное желание что-то запускать Я буду использовать свой droplet на digital ocean, вы можете использовать хоть виртуальную машину на своём компьютере, разницы 0.\nИтак, мы зашли по ssh на наш сервер, предварительно загрузили на этот сервер файлы приложения, например по этому пути:\n/root/telegram-bot И нам нужно, чтобы запускался скрипт [bot.py](http://bot.py). Это точка входа в наше приложение.\nПолучаем такой путь до нашей точки входа: /root/telegram-bot/bot.py. Этот путь я буду дальше использовать для примеров.\nДля того, что бы создать демона нашего скрипта, требуется сделать ряд вещей:\nСоздать файл \u0026lt;name\u0026gt;.service, в котором будет описана конфигурация нашего демона Попросить systemctl перечитать все файлы настроек демонов Рассказать systemctl о нашем демоне (создаст semilink) Запустить демона! План понятен и приятен. Но где вообще живут эти демоны и чёэтатакое?!\nЗаходим на наш сервер:\nssh \u0026lt;user\u0026gt;@\u0026lt;server_ip_address\u0026gt; Идем смотреть на демонов:\ncd /etc/systemd/system/ \u0026amp;\u0026amp; ls -lah ./ И видим примерно следующую картину:\ndrwxr-xr-x 21 root root 4.0K May 6 08:43 . drwxr-xr-x 6 root root 4.0K May 6 05:50 .. ... drwxr-xr-x 2 root root 4.0K May 6 05:50 sshd-keygen@.service.d lrwxrwxrwx 1 root root 31 Jan 31 22:28 sshd.service -\u0026gt; /lib/systemd/system/ssh.service drwxr-xr-x 2 root root 4.0K Jan 31 22:28 sysinit.target.wants lrwxrwxrwx 1 root root 35 Jan 31 22:26 syslog.service -\u0026gt; /lib/systemd/system/rsyslog.service drwxr-xr-x 2 root root 4.0K Jan 31 22:28 timers.target.wants lrwxrwxrwx 1 root root 41 Jan 31 22:28 vmtoolsd.service -\u0026gt; /lib/systemd/system/open-vm-tools.service Файлы \u0026lt;name\u0026gt;.service — описание демона. Там лежит вся его настройка\nПапки \u0026lt;name\u0026gt;.service.d — это папка, в которой лежит дополнительная настройка демона. По умолчанию она не создается, но мы в нашем примере будем её создавать и положим туда часть настройки демона.\nСоздадим новый файл конфигурации демона для нашего приложения.\nСоздаём конфигурацию демона # Без лишних слов, будучи в папке /etc/systemd/system/\nvim bot.service Откроется редактор [VIM](https://www.vim.org/), в котором мы будем описывать нашего демона:\n[Unit] Description=My telegram bot After=multi-user.target [Service] Type=simple Restart=always ExecStart=/usr/bin/python3 /root/telegram-bot/bot.py [Install] WantedBy=multi-user.target Вот в целом - то и всё. После обновления systemctl можно запустить сервис. Но мы разберемся немного подробнее, за что отвечает каждый ключ в каждой секции.\nСекция Unit:\nDescription — Просто описание вашего сервиса, которое будет выведено при выполнении systemctl status \u0026lt;name\u0026gt; в статус-строке, после названия демона. Может быть вообще произвольным. After — Определяет порядок запуска блоков. Здесь multi-user.target указывает на цель, в которой описаны другие службы. Т.е. наш демон запустится только после того, как все службы, указанные в multi-user.target были успешно запущены. Например, в multi-user.target важные системные службы, такие как NetworkManager (NetworkManager.service) или D-Bus (dbus.service) и инструкция запуска другого целевого блока с именем basic.target. Секция Service:\nType — Настраивает тип демона, этот ключ на прямую влияет на то, как будет выполняется инструкция в ExecStart. simple — Значение по умолчанию. Процесс начинается с инструкции ExecStart и является основным процессом forking — Процесс начинается с ExecStart и порождает дочерний процесс, который замещает собой родительский процесс. oneshot — аналогичен simple, только процесс завершается до запуска последующих блоков. \u0026hellip; и т.д. Ссылку на описание всех ключей оставлю ниже. Нас же интересует только simple. Restart — Указывает на то, будет ли перезапущена служба после завершения процесса. Указываем always, что бы не быть неприятно удивленными каким-нибудь вечером. ExecStart — Инструкция, которая исполнится при запуске демона. В данном примере я указал абсолютные пути до Python и до моего скрипта, который является точкой входа в приложение. Можно упростить до python3 /root/telegram-bot/bot.py, но лучше перестраховаться на случай, если на сервере не прокинуты $PATH. Секция Install:\nWantedBy — указывает на зависимости, причем делает это мягче, чем ключ RequareBy, который бы прервал выполнение, в случае неудачного запуска одной из служб. Описание всех ключей тут.\nПрячем от чужих глаз чувствительные данные # Бывает такое, что приложение использует какие-то пароли / ключи / токены и тд, которые не стоит держать в открытом виде в скрипте или где-то рядом с ним, что бы случайно не выгрузить на github в публичный репозиторий. В таком случае можно восппользоваться переменными окружения или Environment variable.\nТак как наше приложение будет запущено в качестве демона, то нельзя просто так прокинуть эти переменные, допустим, пользователю root. Мы будем использовать дополнительную настройку нашего демона, в которой переопределим этот блок (вспоминаем про папки \u0026lt;name\u0026gt;.service.d)\nДля этого воспользуемся аргументом edit у systemctl и создадим для нашей настройки bot.service доп настройку с нашими переменными окружения:\nsystemctl edit bot.service Откроется редактор nano с пустым файлом. Внесем туда свои переменный, переопределив блок [Service]:\n[Service] Environment=\u0026#34;telegram=\u0026lt;your_token\u0026gt;\u0026#34; Environment=\u0026#34;openweathermap=\u0026lt;your_token\u0026gt;\u0026#34; Environment=\u0026#34;resources_path=/root/telegram-bot/resources\u0026#34; Далее нажимаем Ctrl + O, чтобы записать наш файл на диск, назовем его local.conf, и нажимаем Ctrl + X для выхода.\nМожем проверить, что у нас получилось:\n. ├── bot.service ├── bot.service.d │ └── local.conf Видим наш файл настройки bot.service и дополнительная конфигурация local.conf в папке bot.service.d.\nТеперь при запуске службы будут подтянуты переменные окружения и ваш код приложения, который требовал эти самые environment variable будет отрабатывать как положено.\nЗапускаем и проверяем статус нашего демона # Мы сделали все нужные настройки, теперь надо рассказать нашему systemctl о нашем демоне, добавить его в автозапуск и запустить наконец-то.\nОбновляем информацию о демонах:\nsystemctl daemon-reload Добавляем в автозагрузку:\nsystemctl enable bot.service Запускаем:\nsystemctl start bot.service Проверим статус, запустился ли вообще сервис или упал:\nsystemctl status bot.service Должны увидеть вот такое сообщение:\n● bot.service - My telegram bot Loaded: loaded (/etc/systemd/system/bot.service; enabled; vendor preset: enabled) Drop-In: /etc/systemd/system/bot.service.d └─local.conf Active: active (running) since Fri 2022-05-06 09:17:11 UTC; 24h ago ... Если в статусе Failed, значит либо что-то с приложением, либо что-то с настройкой. Можно пойти почитать логи коммандой [dmesg](https://manpages.org/dmesg) или cat /var/log/syslog.\nПолезные ссылки # Простейший способ превратить скрипт в демона, Linkolnloop, Graham King Руководство для начинающих по systemctl, BitLaunch Использование Systemctl для управления системой и юнитами, библиотека Digital Ocean Управление службами с помощью systemd, документация Red Hat Описание всех ключей файла конфигурации службы, документация Red Hat Как создать и удалить символическую ссылку, freecodecamp, Dillion Megida Как читать и устанавливать переменные среды и shell в Linux, библиотека Digital Ocean Благодарности серому волшебнику # Если текст был полезен и ты не можешь усмирить желание быть благодарным, то можешь:\nВоспользоваться моей реферальной ссылкой на TimeWeb:\nВоспользоваться моей реферальной ссылкой на DigitalOcean:\nИли же закинуть монету в мой кошелёк (USDT и TRX кошельки одинаковые, да, это не ошибка):\nTether (TRC-20, USDT):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Tron (TRX):\nTYvFYUV3h5HwqfyTxskGQK7nDbUHTcwPn2 Monero (XMR):\n4AbxbT9vrNQTUDCQEPwVLYZq2zTEYzNr9ZzTLaq9YcwVfdxwkWjZ6FsewuXVDXPk7x2rE6FZACmLePPgJEcY4rm1GSHkwTZ ","date":"19 July 2022","permalink":"/blog/exorcism-with-python/","section":"Blogs","summary":"Рассмотрим, как демонизировать наше python-приложение под Linux.","title":"Запуск Python приложения в качестве службы на Linux-сервер с systemd или причём тут экзорцизм"},{"content":"","date":"1 January 0001","permalink":"/cv/","section":"Owl's Paw","summary":"","title":""},{"content":" ","date":"1 January 0001","permalink":"/music/","section":"Owl's Paw","summary":" ","title":"Music"}]